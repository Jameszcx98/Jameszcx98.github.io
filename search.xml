<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>multithreading</title>
      <link href="2021/11/21/multithreading/"/>
      <url>2021/11/21/multithreading/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程和并发编程"><a href="#多线程和并发编程" class="headerlink" title="多线程和并发编程"></a>多线程和并发编程</h1><h2 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h2><blockquote><p>进程是资源分配的最小单位</p><p>线程是CPU调度的和执行的单位</p></blockquote><h2 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h2><h3 id="继承Thread类（重点）"><a href="#继承Thread类（重点）" class="headerlink" title="继承Thread类（重点）"></a>继承Thread类（重点）</h3><blockquote><p>当Java虚拟机启动时，通常有一个非守护进程（通常调用某些指定类的名为main的方法）。Java虚拟机将继续执行线程，直到发生以下任一情况：</p><ul><li>已经调用了Runtime类的exit方法，并且安全管理器已经允许进行推出操作。</li><li>所有不是守护进程线程的线程都已经死亡，无论是从调用返回到run方法还是抛出超出</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我在看代码---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">TestThread</span> testThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    testThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不建议使用：避免OOP单继承局限性</p><h3 id="实现Runnable接口（重点）"><a href="#实现Runnable接口（重点）" class="headerlink" title="实现Runnable接口（重点）"></a>实现Runnable接口（重点）</h3><blockquote><p>创建线程方法：实现runnable接口，传入目标对象+thread对象.start</p><p>推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我在看代码---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">TestThread</span> testThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThread<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现Callable接口（了解）"><a href="#实现Callable接口（了解）" class="headerlink" title="实现Callable接口（了解）"></a>实现Callable接口（了解）</h3><blockquote><ol><li>实现callable接口，需要返回值类型</li><li>重写call方法，需要抛出异常</li><li>创建目标对象</li><li>创建执行任务：ExecutorService ser = Executors.newFixedThreadPool(1);</li><li>提交执行: Future<boolean> result1 = ser.submit(t1);</boolean></li><li>获取结果: boolean r1 = result1.get()</li><li>关闭服务: ser.shutdownNow();</li></ol></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span><span class="token comment">//网络图片地址</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//保存的文件名</span>  <span class="token keyword">public</span> <span class="token class-name">TestCallable</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//实现的功能</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>；    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">{</span>      <span class="token class-name">TestCallable</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestCallable</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span><span class="token string">"james"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建执行任务：</span>      <span class="token class-name">ExecutorService</span> ser <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//提交执行</span>      <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> r1 <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> r2 <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> t3 <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取结果</span>      <span class="token keyword">boolean</span> rs1 <span class="token operator">=</span> r1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> rs2 <span class="token operator">=</span> r2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> rs3 <span class="token operator">=</span> r3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭服务</span>      ser<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><blockquote><ol><li>线程状态</li></ol></blockquote><ul><li>新生状态</li><li>就需状态</li><li>运行状态</li><li>阻塞状态</li><li>死亡状态</li></ul><blockquote><ol start="2"><li>线程的方法</li></ol></blockquote><p><img src="/2021/11/21/multithreading/image-20211122121717943.png" alt="image-20211122121717943"></p><h3 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h3><p>设置标识位，让线程自己停止下来。</p><h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><p>sleep（时间）指定当前线程阻塞的毫秒数</p><p>sleep存在InterruptedException</p><p>sleep时间到达后线程进入就需状态</p><p>sleep可以模拟网络延时，倒计时等</p><p>每一个对象都有一个锁，sleep不会释放锁</p><h3 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h3><ul><li>礼让线程，让当前正在执行的线程停止，但不阻塞</li><li>将线程从运行状态转换为就需状态</li><li>让CPU重新调度，礼让不一定成功</li></ul><h3 id="线程强制执行"><a href="#线程强制执行" class="headerlink" title="线程强制执行"></a>线程强制执行</h3><ul><li>Join合并线程，等待线程执行完成之后，再执行其他线程，其他线程阻塞。</li></ul><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><ul><li>Java会提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。</li><li>线程的优先级用数字表示，范围从1～10<ul><li>Thread.MIN_PRIORITY=1</li><li>Thread.MAX_PRIORITY=10</li><li>Thread.NORM_PRIORITY=5</li></ul></li><li>使用以下方式改变或获取优先级<ul><li>getPriority().setPriority(int xxx)</li></ul></li></ul><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><ul><li>线程分为用户线程和守护线程</li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕（个人感觉是一个辅助的概念，当用户线程结束，虚拟机不需要管守护线程）</li><li>如，后台记录操作日志，监控内存，垃圾回收等</li></ul><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h3 id="线程同步的顺序性和正确性"><a href="#线程同步的顺序性和正确性" class="headerlink" title="线程同步的顺序性和正确性"></a>线程同步的顺序性和正确性</h3><blockquote><p>并发：同一个对象被多个线程同时操作</p><ol><li>顺序性</li></ol><p>多个需要同时访问此对象的线程进入这个对象池形成队列，等待前面线程使用完毕，下一个线程再使用。</p><ol start="2"><li>正确性</li></ol><p>在访问时加入锁机制synchronized，当一个线程获得对象的排他锁，独占资源，其他线程必须等待，使用后释放锁即可，但会存在以下问题：</p><ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题；</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题。</li></ul></blockquote><h3 id="不安全的例子："><a href="#不安全的例子：" class="headerlink" title="不安全的例子："></a>不安全的例子：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeBuyTicket</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">BuyTicket</span> station <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span><span class="token string">"people1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span><span class="token string">"people2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span><span class="token string">"people3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Buyticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>  <span class="token comment">//票</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> ticketNums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//外部停止方式</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//买票</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//判断是否有票</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ticketNums<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//买票</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token operator">+</span><span class="token string">"拿到"</span><span class="token operator">+</span>ticketNums<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><blockquote><p>如果要实现指定锁定对象：synchronized(Obj) {}</p><ul><li>Obj称之为 <code>监视器</code></li><li>obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li><li>同步方法中无需指定同步监视器，因为同步方法的同步监视器默认是当前对象</li></ul></blockquote><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>从JDK5.0开始，Java提供了更强大的线程同步机制–通过现式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</p><p>java.util.concurrent.locks.Lock接口是控制多个线程对共享对象进行访问的工具。ReentrantLock类实现了Lock，它拥有与synchronized相同的并发性和内存语义。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TestLock2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> tocketNums <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentranLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentranLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">try</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加锁</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ticketNums<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="synchronized与Lock对比"><a href="#synchronized与Lock对比" class="headerlink" title="synchronized与Lock对比"></a>synchronized与Lock对比</h3><ul><li>Lock是显示锁（手动开启和关闭锁，别忘记关闭锁）synchronized是隐式锁，出了作用域自动释放。</li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li><li>优先使用顺序：<ul><li>Lock &gt; 同步代码块（已经进入方法体，分配了相应资源）&gt; 同步方法（在方法体之外）</li></ul></li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><blockquote><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行。</p><p>某一个同步块同时拥有“两个以上对象的锁”时，就可能会发生“死锁”的问题。</p></blockquote><h3 id="产生死锁的四个必要条件"><a href="#产生死锁的四个必要条件" class="headerlink" title="产生死锁的四个必要条件"></a>产生死锁的四个必要条件</h3><blockquote><ol><li>互斥条件：一个资源每次只能被一个进程使用</li><li>请求与互斥条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li><li>不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺</li><li>循环等待条件：若干进程之间形成一种投喂相接的循环等待资源关系</li></ol></blockquote><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Makeup</span> g1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Makeup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"灰姑娘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Makeup</span> g2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Makeup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"白雪公主"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    g2<span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">class</span> sliptick<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> mirror<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Makeup</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token class-name">Lipstick</span> lipstick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lipstick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token class-name">Mirror</span> mirror <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token comment">//选择</span>  <span class="token class-name">String</span> girlName<span class="token punctuation">;</span><span class="token comment">//使用化妆品的人</span>    <span class="token class-name">Makeup</span><span class="token punctuation">(</span><span class="token keyword">int</span> choice<span class="token punctuation">,</span> <span class="token class-name">String</span> girlName<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>choice<span class="token operator">=</span>choice<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>girlName<span class="token operator">=</span>girlName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">makeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">makeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>choice<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girlName <span class="token operator">+</span> <span class="token string">"获得口红的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">synchonized</span><span class="token punctuation">(</span>mirror<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girlName<span class="token operator">+</span><span class="token string">"获得镜子的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mirror<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thi<span class="token punctuation">{</span>s<span class="token punctuation">.</span>girlName<span class="token operator">+</span><span class="token string">"获得镜子的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girlName<span class="token operator">+</span><span class="token string">"获得口红的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程通信问题"><a href="#线程通信问题" class="headerlink" title="线程通信问题"></a>线程通信问题</h2><blockquote><p>如果线程没有协作的话，多个线程之间并行执行互不相干，所以有一定的局限性。</p></blockquote><h3 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h3><blockquote><p>这是一个线程同步的问题，生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。</p><ul><li>对于生产者，没有生产产品之前，要通知消费者等待，而生产了产品之后，又需要马上通知消费者消费。</li><li>对于消费者，在消费之后，要通知生产者已经结束消费，同时生产新的产品以供消费。</li><li>在生产者消费者问题中，仅有synchronized是不够的<ul><li>synchronized可阻止并发更新同一个共享资源，实现了同步。</li><li>synchronized不能用来实现不同线程之间的消息传递（通信）。</li></ul></li></ul></blockquote><p>Java提供了几个方法解决线程之间的同步问题：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>wait()</td><td>表示线程一直等待，一直到其他线程通知，与sleep不同会释放锁</td></tr><tr><td>wait(long timeout)</td><td>指定等待的毫秒数</td></tr><tr><td>notify()</td><td>唤醒一个处于等待状态的线程</td></tr><tr><td>notifyAll()</td><td>唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td></tr></tbody></table><p>注意：均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常</p><h3 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试：生产者消费者模型---&gt;利用缓冲区解决：管程法</span><span class="token comment">//生产者，消费者，产品，缓冲区</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPc</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token comment">//生产者</span><span class="token keyword">class</span> <span class="token class-name">Productor</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token class-name">SysContainer</span> container<span class="token punctuation">;</span>      pubic <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">SysContainer</span> container<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      container<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产了"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"只鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//消费者</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token class-name">SysContainer</span> container<span class="token punctuation">;</span>    pubic <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">SysContainer</span> container<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费了---&gt;"</span><span class="token operator">+</span>container<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token operator">+</span><span class="token string">"只鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//缓冲区</span><span class="token keyword">class</span> <span class="token class-name">SynContainer</span><span class="token punctuation">{</span>  <span class="token comment">//需要一个容器大小</span>  <span class="token class-name">Chicken</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chickens <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//容器计数器</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//生产者放入产品</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Chicken</span> chicken<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//如果容器满了，就需要等待</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span>chickens<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//通知消费者消费，生产等待</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果没有满，我们就需要丢入产品</span>    chickens<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token operator">=</span>chickens<span class="token punctuation">;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//可以通知消费者消费了</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment">//消费者消费产品</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//等待生产者生产，消费者等待</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token class-name">Chicken</span> chicken <span class="token operator">=</span> chicken<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//吃完了，通知生产者生产</span>    <span class="token keyword">return</span> chicken<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="信号灯法"><a href="#信号灯法" class="headerlink" title="信号灯法"></a>信号灯法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试生产者消费者问题2:信号灯法，标志位解决</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPc2</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token comment">//生产者--&gt;演员</span><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token comment">//消费者--&gt;观众</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token comment">//产品--&gt;节目</span><span class="token keyword">class</span> TV<span class="token punctuation">{</span>  <span class="token comment">//演员表演，观众等待</span>  <span class="token comment">//观众观看，演员等待</span>  <span class="token class-name">String</span> voice<span class="token punctuation">;</span><span class="token comment">//表演的节目</span>  <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//表演</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token class-name">String</span> voice<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"演员等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"演员表演了："</span><span class="token operator">+</span>voice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//通知观众观看</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>voice <span class="token operator">=</span> voice<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//让观众等待下一场</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment">//观看</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"观看了:"</span><span class="token operator">+</span>voice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="高级主题"><a href="#高级主题" class="headerlink" title="高级主题"></a>高级主题</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>design-mode</title>
      <link href="2021/08/28/design-mode/"/>
      <url>2021/08/28/design-mode/</url>
      
        <content type="html"><![CDATA[<h1 id="design-mode"><a href="#design-mode" class="headerlink" title="design mode"></a>design mode</h1><h2 id="OOP七大原则"><a href="#OOP七大原则" class="headerlink" title="OOP七大原则"></a>OOP七大原则</h2><blockquote><ol><li>开闭原则：对扩展开放，对修改关闭</li><li>里氏替换原则：继承必须确保超类所拥有的性质在子类中仍然成立</li><li>依赖倒置原则：要面向接口编程，不要面向实现编程（抽象不依赖细节，细节依赖抽象，编程中的逻辑关系都是依赖于接口模型进行规定的，具体的实现类都是为了实现接口的功能）</li><li>单一职责原则：控制类的粒度大小，将对象解耦、提高其内聚性（一个对象不需要承担太多的职责）</li><li>接口隔离原则：要为各个类建立它们需要的专用接口</li><li>迪米特法则：只与你的朋友交谈，不跟陌生人说话</li><li>合成服用原则：尽量先使用组合或者聚会等关联联系来实现，其次才考虑使用继承的关系来实现。</li></ol><p>（组合/聚合是has的关系，继承是is的关系）组合通过一个类是另一个类的成员变量来实现</p></blockquote><p>最终原则保证系统架构和结构的清晰性。</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>作用：</p><ul><li>实现了创建者和调用者的分离</li></ul><p>核心本质：</p><ul><li>实例化对象不使用new，使用工厂方法代替</li><li>将选择实现类，创建对象统一管理和控制。从而将调用者跟我们的实现类解耦</li></ul><p>OOP七大原则：</p><ul><li>开闭原则</li><li>依赖倒转原则</li><li>迪米特法则</li></ul><p>三种模式：</p><ul><li>简单工厂模式<ul><li>用来生产同一结构等级中的任何产品（对于增加新的产品，需要修改原来的代码）</li></ul></li><li>工厂方法模式<ul><li>用来生产同一等级结构中的固定产品（支持增加任意产品）</li></ul></li><li>抽象工厂模式<ul><li>围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂</li></ul></li></ul></blockquote><ul><li><p>简单工厂模式：</p><ol><li>结构图</li></ol><p><img src="/2021/08/28/design-mode/image-20210829220351295.png" alt="image-20210829220351295"></p><ol start="2"><li>特点：<ol><li>特点消费者不需要知道汽车是如何制造的（实例化wuling的具体方法），直接从工厂进行获取（不关心如何实现，只调用）</li><li>如果要新增汽车，需要修改车工厂代码，违反了开闭原则</li></ol></li></ol></li><li><p>工厂方法模式：</p><ol><li>结构图</li></ol><p><img src="/2021/08/28/design-mode/image-20210829221013768.png" alt="image-20210829221013768"></p><ol start="2"><li>特点：<ol><li>编写了一个工厂的接口，如果新增汽车，直接添加一个工厂实现类就可以了，支持开闭原则。</li></ol></li></ol></li><li><p>抽象工厂模式：个人认为与工厂方法模式没什么区别，就是一个工厂需要生产多个产品的时候使用抽象工厂模式，有产品族和产品结构的概念。</p></li></ul><blockquote><p>定义：</p><ul><li>抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需制定它们具体的类</li></ul><p>适用场景：</p><ul><li>应用层不依赖于产品类实例如何被创建，实现的细节。</li><li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码。</li><li>提供一个产品类的库，所有的产品以同样的接口出现，从而使得客户端不依赖于具体的实现</li></ul><p>优点：</p><ul><li>具体产品在应用层的代码隔离，无需关心创建的细节</li><li>将一个系列的产品统一到一起创建</li></ul><p>缺点：</p><ul><li>规定了所有可能被创建的产品集合，产品簇中拓展新的产品困难</li><li>增加了系统的抽象性和理解难度</li></ul></blockquote><h2 id="结构性模式"><a href="#结构性模式" class="headerlink" title="结构性模式"></a>结构性模式</h2><blockquote><p>作用：</p><ul><li>从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题</li><li></li></ul></blockquote><p>proxy生成动态代理的实例</p><p>invocationHandler调用处理程序并返回结果</p><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p>如果要使用这个接口的方法，采用实现接口</p><p>如果这个类有共同的属性，采用抽象类</p><p>这个类是一个什么（extends 继承的关系）</p><p>这个类有什么（自动注入的关系）</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java</title>
      <link href="2021/08/04/java/"/>
      <url>2021/08/04/java/</url>
      
        <content type="html"><![CDATA[<h1 id="java-难点"><a href="#java-难点" class="headerlink" title="java 难点"></a>java 难点</h1><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>内置注解：</p><blockquote><p>@overide @deprecated @suppressWarnings</p></blockquote><p>元注解：</p><blockquote><p>元注解的作用就是负责注解其他注解</p><p>有：@Target @Retention @Documented @Inherited</p><p>@Target：用于描述注解的适用范围</p><p>@Retention：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（SOURCE&lt;CLASS&lt;RUNTIME）</p><p>@Document：说明该注解将包含在javadoc中</p><p>@Inherited：说明子类可以继承父类中的注解</p></blockquote><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="反射原理"><a href="#反射原理" class="headerlink" title="反射原理"></a>反射原理</h3><blockquote><p>动态语言：是一类在运行时可以改变其结构的语言。</p><p>静态语言：运行时结构不可改变的语言就是静态语言。</p></blockquote><ul><li>Reflection是java被视为动态语言的关键，反射机制允许程序在执行期间借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</li></ul><blockquote><p><strong>原理：</strong></p><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以称之为反射。</p><p><strong>优点：</strong></p><ul><li>可以实现动态创建对象和编译，体现出很大的灵活性</li></ul><p><strong>缺点：</strong></p><ul><li>对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且满足我们的需求。这类操作总是属于鳗鱼直接执行相同的操作。</li></ul><p><strong>Java反射机制提供的功能：</strong></p><ul><li><p>在运行时判断任意一个对象所属的类</p></li><li><p>在运行时构造任意一个类的对象</p></li><li><p>在运行时判断任意一个类所具有的成员变量和方法</p></li><li><p>在运行时获取泛型信息</p></li><li><p>在运行时调用任意一个对象的成员变量和方法</p></li><li><p>在运行时处理注解</p></li><li><p>生成动态代理</p></li></ul></blockquote><ul><li>反射流程图：</li></ul><p><img src="/2021/08/04/java/image-20210808115824094.png" alt="image-20210808115824094"></p><blockquote><p>通过getclass方法可以得到的信息有：某个类的属性，方法和构造器，某个类实现的结构。</p><p>对于每个类而言，JRE都为其保留一个不变的Class类型的对象。</p><p><strong>class类的特点：</strong></p><ul><li>Class本身也是一个类</li><li>Class对象只能由系统建立对象</li><li>一个加载的类在JVM中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记住自己是由哪个Class实例所生成</li><li>通过Class可以完整的得到一个类中的所有被加载的结构</li><li>Class类是Refection的根源，针对任何你想动态加载，运行的类，唯有鲜活的相应的Class对象</li></ul><p><strong>哪些类型可以有Class对象：</strong>（只要元素类型与维度一样，就是同一个Class）</p><ul><li>class：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类</li><li>interface：接口</li><li>【】：数组</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本类型</li><li>void</li></ul></blockquote><p><img src="/2021/08/04/java/image-20210808132702068.png" alt="image-20210808132702068"></p><p>获取Class类的实例</p><blockquote><ul><li>若已知具体的类，通过类的class属性获取（该方法最为安全可靠）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>已知某个类的实例，调用该实例的getClass（）方法获取Class对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName（）获取，可能会抛出ClassNotFoundException</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Reflection.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>内置基本类型可以直接用类名.Type</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> type <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>利用ClassLoader(通过父类获取)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Teacher</span><span class="token punctuation">.</span><span class="token function">getSuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="用反射操作注解"><a href="#用反射操作注解" class="headerlink" title="用反射操作注解"></a>用反射操作注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.xx.xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取类的注解</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Annotation</span> a <span class="token operator">:</span> annotations<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//获取注解中的值</span><span class="token class-name">XXX</span> xx <span class="token operator">=</span> <span class="token punctuation">(</span>XXX<span class="token punctuation">)</span>c1<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">xxx<span class="token punctuation">.</span></span>Class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> ooo <span class="token operator">=</span> xx<span class="token punctuation">.</span><span class="token function">getxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取类字段的注解</span><span class="token class-name">Field</span> f <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>xxx<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//xxx是注解的名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><blockquote><ul><li>加载：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.class对象。</li><li>链接：将java类的二进制代码合并到jvm的运行状态之中的过程。<ul><li>验证：确保加载的类信息符合jvm规范，没有安全的问题</li><li>准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</li><li>解析：虚拟机常量池内的符号引用（常量名）替换成直接引用（地址）的过程。</li></ul></li><li>初始化：<ul><li>执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译器自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）</clinit></clinit></li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。</clinit></li></ul></li></ul></blockquote><p>什么时候会发生类初始化？</p><blockquote><p>类的主动引用（一定会发生类的初始化）</p><ul><li>当初始化启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员变量（除了final常量）和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类。</li></ul><p>类的被动引用（不会发生类的初始化）</p><ul><li>当访问一个静态域时，只有真正声明这个域才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化。</li><li>通过数组定义类引用，不会触发此类的初始化。（ Teacher[] xxx=new Teacher[5])</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul></blockquote><h2 id="使用Optional解决NPE问题"><a href="#使用Optional解决NPE问题" class="headerlink" title="使用Optional解决NPE问题"></a>使用Optional解决NPE问题</h2><h3 id="构建Optional对象"><a href="#构建Optional对象" class="headerlink" title="构建Optional对象"></a>构建Optional对象</h3><blockquote><ol><li>of(T value)：当value值为null时，of(T value)会报NullPointerException异常；当Value值不为空时，能正常构造Optional对象。</li><li>ofNullable(T value)：当value值为null时，不会throw Exception会直接返回一个EMPTY对象。</li></ol></blockquote><h3 id="Optional操作对象"><a href="#Optional操作对象" class="headerlink" title="Optional操作对象"></a>Optional操作对象</h3><blockquote><p>map(Function&lt;? super T, ? extends U&gt; mapper)和flatMap(Function&lt;? super T, Optional<u>&gt; mapper)</u></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> city <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span> u<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>isPresent()和ifPresent(Consumer&lt;? super T&gt; consumer)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span><span class="token punctuation">{</span>   <span class="token comment">// TODO: do something</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>filter(Predicate&lt;? super T&gt; predicate)</p><p>filter 方法接受一个 Predicate 来对 Optional 中包含的值进行过滤，如果包含的值满足条件，那么还是返回这个 Optional；否则返回 Optional.empty。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//如果user的name的长度是小于6的，则返回。如果是大于6的，则返回一个EMPTY对象。</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> user1 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> u<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>orElse(T other)，orElseGet(Supplier&lt;? extends T&gt; other)和orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</p><p>在构造函数传入的value值为null时，进行调用的。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//orElse函数依然会执行createUser()方法，而orElseGet函数并不会执行createUser()方法</span>user <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="springboot-全局异常处理"><a href="#springboot-全局异常处理" class="headerlink" title="springboot 全局异常处理"></a>springboot 全局异常处理</h2><blockquote><p>全局异常处理，所解决的问题就是，当程序出现异常，可以通过aop的方式将异常信息转换为前后端对接的数据形式。</p></blockquote><p>在实际的开发工作中，不包含全局异常处理，整个应用随着不断的大型化其规范性也是有两个阶段的。</p><ol><li>很垃圾的阶段（数据传输内容，没有定义全局的接口枚举类，后期较难维护）</li></ol><p><img src="/2021/08/04/java/image-20210805090111556.png" alt="image-20210805090111556"></p><ol start="2"><li>比较完善的阶段</li></ol><p><img src="/2021/08/04/java/image-20210805090516524.png" alt="image-20210805090516524"></p><p>如果项目中已经有了全局异常处理，项目的结构会升级为如下形式：</p><p><img src="/2021/08/04/java/image-20210805091121768.png" alt="image-20210805091121768"></p><h3 id="全局异常处理的实现"><a href="#全局异常处理的实现" class="headerlink" title="全局异常处理的实现"></a>全局异常处理的实现</h3><ol><li>枚举类接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseErrorInfoInterface</span> <span class="token punctuation">{</span>    <span class="token comment">/** 状态码*/</span> <span class="token class-name">String</span> <span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** 状态描述*/</span> <span class="token class-name">String</span> <span class="token function">getResultMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>自定义枚举类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">CommonEnum</span> <span class="token keyword">implements</span> <span class="token class-name">BaseErrorInfoInterface</span> <span class="token punctuation">{</span><span class="token comment">// 数据操作错误定义</span><span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">,</span> <span class="token string">"成功!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">BODY_NOT_MATCH</span><span class="token punctuation">(</span><span class="token string">"400"</span><span class="token punctuation">,</span><span class="token string">"请求的数据格式不符!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SIGNATURE_NOT_MATCH</span><span class="token punctuation">(</span><span class="token string">"401"</span><span class="token punctuation">,</span><span class="token string">"请求的数字签名不匹配!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">NOT_FOUND</span><span class="token punctuation">(</span><span class="token string">"404"</span><span class="token punctuation">,</span> <span class="token string">"未找到该资源!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">INTERNAL_SERVER_ERROR</span><span class="token punctuation">(</span><span class="token string">"500"</span><span class="token punctuation">,</span> <span class="token string">"服务器内部错误!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SERVER_BUSY</span><span class="token punctuation">(</span><span class="token string">"503"</span><span class="token punctuation">,</span><span class="token string">"服务器正忙，请稍后再试!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** 状态码 */</span><span class="token keyword">private</span> <span class="token class-name">String</span> resultCode<span class="token punctuation">;</span><span class="token comment">/** 状态描述 */</span><span class="token keyword">private</span> <span class="token class-name">String</span> resultMsg<span class="token punctuation">;</span><span class="token class-name">CommonEnum</span><span class="token punctuation">(</span><span class="token class-name">String</span> resultCode<span class="token punctuation">,</span> <span class="token class-name">String</span> resultMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>resultCode <span class="token operator">=</span> resultCode<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>resultMsg <span class="token operator">=</span> resultMsg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> resultCode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResultMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> resultMsg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>自定义异常类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BizException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token comment">/** * 错误码 */</span><span class="token keyword">protected</span> <span class="token class-name">String</span> errorCode<span class="token punctuation">;</span><span class="token comment">/** * 错误信息 */</span><span class="token keyword">protected</span> <span class="token class-name">String</span> errorMsg<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">BizException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">BizException</span><span class="token punctuation">(</span><span class="token class-name">BaseErrorInfoInterface</span> errorInfoInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>errorInfoInterface<span class="token punctuation">.</span><span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorInfoInterface<span class="token punctuation">.</span><span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorInfoInterface<span class="token punctuation">.</span><span class="token function">getResultMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">BizException</span><span class="token punctuation">(</span><span class="token class-name">BaseErrorInfoInterface</span> errorInfoInterface<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>errorInfoInterface<span class="token punctuation">.</span><span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorInfoInterface<span class="token punctuation">.</span><span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorInfoInterface<span class="token punctuation">.</span><span class="token function">getResultMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">BizException</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">BizException</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorCode<span class="token punctuation">,</span> <span class="token class-name">String</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>errorCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">BizException</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorCode<span class="token punctuation">,</span> <span class="token class-name">String</span> errorMsg<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>errorCode<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> errorCode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setErrorCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setErrorMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Throwable</span> <span class="token function">fillInStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>自定义接口数据格式</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultBody</span> <span class="token punctuation">{</span><span class="token comment">/** * 响应代码 */</span><span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span><span class="token comment">/** * 响应消息 */</span><span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span><span class="token comment">/** * 响应结果 */</span><span class="token keyword">private</span> <span class="token class-name">Object</span> result<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">ResultBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">ResultBody</span><span class="token punctuation">(</span><span class="token class-name">BaseErrorInfoInterface</span> errorInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> errorInfo<span class="token punctuation">.</span><span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> errorInfo<span class="token punctuation">.</span><span class="token function">getResultMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> code<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> message<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResult</span><span class="token punctuation">(</span><span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 成功 *  * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ResultBody</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 成功 * @param data * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ResultBody</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ResultBody</span> rb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rb<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">CommonEnum</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rb<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">CommonEnum</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getResultMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rb<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> rb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 失败 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ResultBody</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">BaseErrorInfoInterface</span> errorInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ResultBody</span> rb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rb<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>errorInfo<span class="token punctuation">.</span><span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rb<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>errorInfo<span class="token punctuation">.</span><span class="token function">getResultMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rb<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> rb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 失败 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ResultBody</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ResultBody</span> rb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rb<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>rb<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>rb<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> rb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 失败 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ResultBody</span> <span class="token function">error</span><span class="token punctuation">(</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ResultBody</span> rb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rb<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rb<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>rb<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> rb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>全局异常处理类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">GlobalExceptionHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 处理自定义的业务异常 * @param req * @param e * @return */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">BizException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span>  <span class="token class-name">ResultBody</span> <span class="token function">bizExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">BizException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"发生业务异常！原因是：{}"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultBody</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/** * 处理空指针的异常 * @param req * @param e * @return */</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">ResultBody</span> <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"发生空指针异常！原因是:"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">ResultBody</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">CommonEnum</span><span class="token punctuation">.</span>BODY_NOT_MATCH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">/**        * 处理其他异常     * @param req     * @param e     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">ResultBody</span> <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"未知异常！原因是:"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">ResultBody</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">CommonEnum</span><span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Lamda-表达式"><a href="#Lamda-表达式" class="headerlink" title="Lamda 表达式"></a>Lamda 表达式</h2><h3 id="为什么要使用lamda表达式？"><a href="#为什么要使用lamda表达式？" class="headerlink" title="为什么要使用lamda表达式？"></a>为什么要使用lamda表达式？</h3><blockquote><ul><li>避免内部类定义过多</li><li>使代码更简洁</li><li>去掉了一堆没有意义的代码，只留下核心逻辑</li></ul></blockquote><h3 id="函数式接口："><a href="#函数式接口：" class="headerlink" title="函数式接口："></a>函数式接口：</h3><blockquote><ul><li><p>接口只包含唯一一个抽象方法，那他就是一个函数式接口</p></li><li><p>对于函数式接口，我们可以通过lamda表达式来创建该接口的对象</p></li></ul></blockquote><h3 id="实现方法演变："><a href="#实现方法演变：" class="headerlink" title="实现方法演变："></a>实现方法演变：</h3><p>实现类-&gt;静态内部类-&gt;局部内部类（方法内）-&gt;匿名内部类（通过接口实现）-&gt;lamda</p><h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><p><img src="/2021/08/04/java/image-20211205100807586.png" alt="image-20211205100807586"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>stream将要处理的元素集合看作一种流，在流的过程中，借助Stream API对流中的元素进行操作，比如：筛选、排序、聚合等</p></blockquote><p>stream可以由数组或者集合创建，对流的操作分为两种：</p><ol><li>中间操作，每次返回一个新的流，可以由多个</li><li>终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。</li></ol><p>另外，stream有几个特性：</p><ol><li>stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。</li><li>stream不会改变数据源，通常情况下会产生一个新的集合或一个值。</li><li>stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</li></ol><h3 id="stream的创建"><a href="#stream的创建" class="headerlink" title="stream的创建"></a>stream的创建</h3><p>1、通过 <code>java.util.Collection.stream()</code> 方法用集合创建流</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个顺序流</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个并行流</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parallelStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.使用<code>java.util.Arrays.stream(T[] array)</code>方法用数组创建流</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">IntStream</span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.使用<code>Stream</code>的静态方法：<code>of()、iterate()、generate()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> stream3 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream3<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="stream的使用"><a href="#stream的使用" class="headerlink" title="stream的使用"></a>stream的使用</h3><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历输出符合条件的元素</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 匹配第一个</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> findFirst <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 匹配任意（适用于并行流）</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> findAny <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否包含符合特定条件的元素</span><span class="token keyword">boolean</span> anyMatch <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自然排序</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> max <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compareTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自定义排序</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> max2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对数组字段长度比大小</span>  <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> max <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对对象某一属性值比大小</span>  <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> max <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><ul><li><code>map</code>：遍历每一个元素，返回相应的元素类型</li><li><code>flatMap</code>：遍历每一个元素，返回相应的流，最终会将所有流合并成一个</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span> <span class="token string">"bcdd"</span><span class="token punctuation">,</span> <span class="token string">"defde"</span><span class="token punctuation">,</span> <span class="token string">"fTr"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> intList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> intListNew <span class="token operator">=</span> intList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每个元素大写："</span> <span class="token operator">+</span> strList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每个元素+3："</span> <span class="token operator">+</span> intListNew<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h4><ul><li>将一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求和方式1</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sum <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求和方式2</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sum2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求和方式3</span><span class="token class-name">Integer</span> sum3 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求乘积</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> product <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求最大值方式1</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> max <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">&gt;</span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求最大值写法2</span><span class="token class-name">Integer</span> max2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h3><p>####归集</p><ul><li>将一个流收集起来，最终可以是收集成一个值也可以收集成一个新的集合。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> listNew <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> p<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> p <span class="token operator">-&gt;</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>统计</li></ul><p><code>Collectors</code>提供了一系列用于数据统计的静态方法：</p><p>计数：count<br>        平均值：averagingInt、averagingLong、averagingDouble<br>        最值：maxBy、minBy<br>        求和：summingInt、summingLong、summingDouble<br>        统计以上所有：summarizingInt、summarizingLong、summarizingDouble</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 求总数</span><span class="token class-name">Long</span> count <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求平均工资</span><span class="token class-name">Double</span> average <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">averagingDouble</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求最高工资</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> max <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求工资之和</span><span class="token class-name">Integer</span> sum <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingInt</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一次性统计所有信息</span><span class="token class-name">DoubleSummaryStatistics</span> collect <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summarizingDouble</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><ul><li>分区：将<code>stream</code>按条件分为两个<code>Map</code>，比如员工按薪资是否高于8000分为两部分。(按照范围)</li><li>分组：将集合分为多个Map，比如员工按性别分组。有单级分组和多级分组。（按照值）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 将员工按薪资是否高于8000分组</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> part <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 将员工按性别分组</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> group <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 将员工先按性别分组，再按地区分组</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> group2 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getArea</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="接合"><a href="#接合" class="headerlink" title="接合"></a>接合</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> string <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="归约-1"><a href="#归约-1" class="headerlink" title="归约"></a>归约</h4><p><code>Collectors</code>类提供的<code>reducing</code>方法，相比于<code>stream</code>本身的<code>reduce</code>方法，增加了对自定义归约的支持。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 每个员工减去起征点后的薪资之和（这个例子并不严谨，但一时没想到好的例子）</span><span class="token class-name">Integer</span> sum <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">reducing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工扣税薪资总和："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// stream的reduce</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sum2 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工薪资总和："</span> <span class="token operator">+</span> sum2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>sorted，中间操作。有两种排序：</p><ul><li>sorted()：自然排序，流中元素需实现Comparable接口</li><li>sorted(Comparator com)：Comparator排序器自定义排序</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 按工资升序排序（自然排序）</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newList <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按工资倒序排序</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newList2 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 先按工资再按年龄升序排序</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newList3 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 先按工资再按年龄自定义排序（降序）</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newList4 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> p2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> p2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> p2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###提取/组合</p><p>流也可以进行合并、去重、限制、跳过等操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"g"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// concat:合并两个流 distinct：去重</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newList <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>stream1<span class="token punctuation">,</span> stream2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// limit：限制从流中获得前n个数据</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">-&gt;</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// skip：跳过前n个数据</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> collect2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">-&gt;</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"流合并："</span> <span class="token operator">+</span> newList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"limit："</span> <span class="token operator">+</span> collect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"skip："</span> <span class="token operator">+</span> collect2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="2021/07/30/mongodb/"/>
      <url>2021/07/30/mongodb/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Effective Java</title>
      <link href="2021/07/22/effective-java/"/>
      <url>2021/07/22/effective-java/</url>
      
        <content type="html"><![CDATA[<h1 id="Effective-Java"><a href="#Effective-Java" class="headerlink" title="Effective-Java"></a>Effective-Java</h1><blockquote><p>在此声明，本blog主要围绕阅读Effecive Java的感悟。为了保持强相关性，只会涉及书中内容，每个知识点的扩充会再开专题。</p></blockquote><h2 id="Item3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type"><a href="#Item3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type" class="headerlink" title="Item3:Enforce the singleton property with a private constructor or an enum type"></a>Item3:Enforce the singleton property with a private constructor or an enum type</h2><blockquote><p>why a single-element enum type is often the best way to implement a singleton?</p></blockquote><ol><li> 反射问题(享有特权的客户端可以借助AccessibleObject.setAccessible方法，通过反射机制调用私有构造器。如果需要抵御这种攻击，可以修改构造器，让它在被要求创建第二个实例的时候抛出异常)</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>        <span class="token class-name">Singleton</span> s<span class="token operator">=</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Singleton</span> sUsual<span class="token operator">=</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Singleton</span><span class="token punctuation">&gt;</span></span> constructor<span class="token operator">=</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Singleton</span> sReflection<span class="token operator">=</span>constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>sUsual<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>sReflection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常情况下，实例化两个实例是否相同："</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token operator">==</span>sUsual<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过反射攻击单例模式情况下，实例化两个实例是否相同："</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token operator">==</span>sReflection<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">com.lxp.pattern.singleton.Singleton@1540e19dcom.lxp.pattern.singleton.Singleton@1540e19dcom.lxp.pattern.singleton.Singleton@677327b6正常情况下，实例化两个实例是否相同：true通过反射攻击单例模式情况下，实例化两个实例是否相同：false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>序列化问题（任何一个readObject方法，不管是显式的还是默认的，它都会返回一个新建的实例，这个新建的实例不同于该类初始化时创建的实例。）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerSingleton</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">SerSingleton</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">SerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SerSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SerSingleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">SerSingleton</span> s <span class="token operator">=</span> <span class="token class-name">SerSingleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"单例序列化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"序列化前读取其中的内容："</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"SerSingleton.obj"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"SerSingleton.obj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SerSingleton</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SerSingleton</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"序列化后读取其中的内容："</span><span class="token operator">+</span>s1<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"序列化前后两个是否同一个："</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token operator">==</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">序列化前读取其中的内容：单例序列化com.lxp.pattern.singleton.SerSingleton@135fbaa4com.lxp.pattern.singleton.SerSingleton@58372a00序列化后读取其中的内容：单例序列化序列化前后两个是否同一个：false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方案：采用枚举类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span>  <span class="token class-name">EnumSingleton</span> <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">EnumSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==反射在通过newInstance创建对象时，会检查该类是否ENUM修饰，如果是则抛出异常，反射失败==</p><p>通过transient属性，不序列化。</p><blockquote><p><strong>transient：</strong></p><p>某些字段不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。</p><p><strong>transient使用小结</strong>：</p><p>1）一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。</p><p>2）transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。</p><p>3）被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Effective Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network Programming</title>
      <link href="2021/07/03/network-programming/"/>
      <url>2021/07/03/network-programming/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p>总而言之，计算机网络就是将地理位置不同的计算机之间实现信息传递和资源共享。</p><p>难点：</p><ol><li>如何准确的定位网络上的一台主机，定位到计算机上的某个资源</li><li>找到了这个主机，如何传输数据</li></ol><p>javaweb：网页编程 B/S</p><p>网络编程： TCP/IP C/S</p><p>网络编程中的要素：</p><ul><li>IP和端口号</li><li>网络通信协议</li></ul><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><ul><li>唯一定位一台网络上的计算机</li><li>127.0.0.1: 本机localhost</li><li>ip地址的分类<ul><li>IP地址分类<ul><li>Ipv4/ipv6</li></ul></li><li>公网（互联网）-私网（局域网）<ul><li>192.168.xx.xx 专门给组织内部使用的</li></ul></li></ul></li><li>域名：记忆IP问题</li></ul><p><strong>Java类：inetaddress</strong></p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口表示计算机上的一个程序进程</p><ul><li><p>不同的进程有不同的端口号，来区分软件</p></li><li><p>被规定0-65535</p></li><li><p>TCP，UDP：65535*2</p></li><li><p>端口分类</p><ul><li>公有端口 0-1023<ul><li>HTTP：80</li><li>HTTPS：443</li><li>FTP： 21</li><li>Telent：23</li></ul></li><li>程序注册端口：1024-49151，分配用户或者程序<ul><li>Tomcat：8080</li><li>MySQL：3306</li><li>Oracle：1521</li></ul></li><li>动态、私有：49152-65535</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -ano <span class="token comment">#查看所有的端口</span><span class="token function">netstat</span> -ano<span class="token operator">|</span>findstr <span class="token string">"5900"</span> <span class="token comment">#查看指定的端口</span>tasklist<span class="token operator">|</span>findstr <span class="token string">"8696"</span> <span class="token comment">#查看指定端口的进程</span>ctrl+shift+ESC 调出资源管理器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Java类：inetsocketaddress</strong></p></li></ul><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><p>协议是一种约定</p><ul><li>TCP：用户传输协议</li><li>UDP：用户数据报协议</li><li>IP：网络互联协议</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus</title>
      <link href="2021/06/28/mybatisplus/"/>
      <url>2021/06/28/mybatisplus/</url>
      
        <content type="html"><![CDATA[<h1 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Mybatis Plus是一个Mybatis的增强工具，在Mybatis的基础上只做增强不做改变</p></blockquote><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><p>不要同时导入mybatis和mybatis-plus，会存在版本差异问题。</p><h2 id="实战注意点"><a href="#实战注意点" class="headerlink" title="实战注意点"></a>实战注意点</h2><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><ol><li>连接数据库</li></ol><p><img src="/2021/06/28/mybatisplus/image-20210629084357480.png" alt="image-20210629084357480"></p><p>2.传统方式pojo-dao（连接数据库mybatis，配置mapper.xml）-service-controller</p><p>在对应的mapper上面实现基本的接口BaseMapper</p><h3 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h3><p>通过日志文件可以知道每句sql是怎么执行的。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#配置日志</span><span class="token attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.stdouImpl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/06/28/mybatisplus/image-20210629123509185.png" alt="image-20210629123509185"></p><h3 id="数据ID（mybatis-plus可以自动生成id）"><a href="#数据ID（mybatis-plus可以自动生成id）" class="headerlink" title="数据ID（mybatis-plus可以自动生成id）"></a>数据ID（mybatis-plus可以自动生成id）</h3><p><strong>自定义ID，主键生成的策略</strong></p><ul><li>uuid</li></ul><blockquote><p>优点：</p><p>1）简单，代码方便。</p><p>2）生成ID性能非常好，基本不会有性能问题。</p><p>3）全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。</p><p>缺点：</p><p>1）没有排序，无法保证趋势递增。</p><p>2）UUID往往是使用字符串存储，查询的效率比较低。</p><p>3）存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。</p><p>4）传输数据量大</p><p>5）不可读。</p></blockquote><ul><li>自增id</li></ul><blockquote><p>优点：</p><p>1）简单，代码方便，性能可以接受。</p><p>2）数字ID天然排序，对分页或者需要排序的结果很有帮助。</p><p>缺点：</p><p>1）不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。</p><p>2）在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。</p><p>3）在性能达不到要求的情况下，比较难于扩展。（不适用于海量高并发）</p><p>4）如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。</p><p>5）分表分库的时候会有麻烦。</p><p>6）并非一定连续，类似MySQL，当生成新ID的事务回滚，那么后续的事务也不会再用这个ID了。这个在性能和连续性的折中。如果为了保证连续，必须要在事务结束后才能生成ID，那性能就会出现问题。</p><p>7）在分布式数据库中，如果采用了自增主键的话，有可能会带来尾部热点。分布式数据库常常使用range的分区方式，在大量新增记录的时候，IO会集中在一个分区上，造成热点数据。</p><p>优化方案：</p><p>1）针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。比如：Master1 生成的是 1，4，7，10，Master2生成的是2,5,8,11 Master3生成的是 3,6,9,12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。</p></blockquote><ul><li>雪花算法</li></ul><blockquote><p>使用41bit作为毫秒数，10bit作为机器ID（5个bit是数据中心，5个bit是机器ID），12bit作为毫秒内的流水号（意味每个节点在每毫米可以产生4096个ID），最后还有一个符号位，永远是0。</p><p>优点：</p><p>1）不依赖于数据库，灵活方便，且性能优于数据库。</p><p>2）ID按照时间在单机上是递增的。</p><p>缺点：</p><p>1）在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，在算法上要解决时间回拨的问题。</p></blockquote><ul><li>redis</li></ul><blockquote><p>当使用数据库来生成ID性能不够要求的时候，我们可以尝试使用Redis来生成ID。这主要依赖于Redis是单线程的，所以也可以用生成全局唯一的ID。可以用Redis的原子操作 INCR和INCRBY来实现。</p><p>可以使用Redis集群来获取更高的吞吐量。假如一个集群中有5台Redis。可以初始化每台Redis的值分别是1,2,3,4,5，然后步长都是5。各个Redis生成的ID为：</p><p>A：1,6,11,16,21</p><p>B：2,7,12,17,22</p><p>C：3,8,13,18,23</p><p>D：4,9,14,19,24</p><p>E：5,10,15,20,25</p><p>这个，随便负载到哪个机确定好，未来很难做修改。但是3-5台服务器基本能够满足器上，都可以获得不同的ID。但是步长和初始值一定需要事先需要了。使用Redis集群也可以方式单点故障的问题。</p><p>另外，比较适合使用Redis来生成每天从0开始的流水号。比如订单号=日期+当日自增长号。可以每天在Redis中生成一个Key，使用INCR进行累加。</p><p>优点：</p><p>1）不依赖于数据库，灵活方便，且性能优于数据库。</p><p>2）数字ID天然排序，对分页或者需要排序的结果很有帮助。</p><p>缺点：</p><p>1）如果系统中没有Redis，还需要引入新的组件，增加系统复杂度。</p><p>2）需要编码和配置的工作量比较大。</p></blockquote><ul><li>zookeeper</li></ul><blockquote><p>zookeeper主要通过其znode数据版本来生成序列号，可以生成32位和64位的数据版本号，客户端可以使用这个版本号来作为唯一的序列号。<br>很少会使用zookeeper来生成唯一ID。主要是由于需要依赖zookeeper，并且是多步调用API，如果在竞争较大的情况下，需要考虑使用分布式锁。因此，性能在高并发的分布式环境下，也不甚理想。 </p></blockquote><p>项目中的具体设置。</p><p><img src="/2021/06/28/mybatisplus/image-20210629125334478.png" alt="image-20210629125334478"></p><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><p>所有的数据库表都必须有的字段为</p><ul><li><p>version（乐观锁）</p></li><li><p>Delete（逻辑删除）</p></li><li><p>gmt_create（创建时间）</p></li><li><p>gmt_modified（修改时间）</p></li></ul><blockquote><p>方式一：数据库级别</p></blockquote><ol><li>在表中新增字段</li></ol><img src="/2021/06/28/mybatisplus/image-20210629130205442.png" alt="image-20210629130205442" style="zoom:200%;"><blockquote><p>方式二：代码级别</p></blockquote><ol><li><p>删除数据库的默认值和更新操作</p></li><li><p>实体类字段属性上需要增加注解</p></li></ol><p><img src="/2021/06/28/mybatisplus/image-20210629130557388.png" alt="image-20210629130557388"></p><ol start="3"><li>编写处理器来处理注解</li></ol><p><img src="/2021/06/28/mybatisplus/image-20210629130842852.png" alt="image-20210629130842852"></p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁的实现方式：</p><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul><blockquote><p>mybatis-plus中的乐观锁插件</p></blockquote><ol><li>给数据库中添加version字段（int类型，初始字段为1）</li><li>实体类添加对应的字段</li></ol><img src="/2021/06/28/mybatisplus/image-20210629131429189.png" alt="image-20210629131429189" style="zoom:200%;"><ol start="3"><li>注册组件（编写一个配置类）</li></ol><p><img src="/2021/06/28/mybatisplus/image-20210629131602037.png" alt="image-20210629131602037"></p><ol start="4"><li>测试</li></ol><p><img src="/2021/06/28/mybatisplus/image-20210629131903669.png" alt="image-20210629131903669"></p><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><p><img src="/2021/06/28/mybatisplus/image-20210630090725988.png" alt="image-20210630090725988"></p><p><img src="/2021/06/28/mybatisplus/image-20210630090916517.png" alt="image-20210630090916517"></p><p><img src="/2021/06/28/mybatisplus/image-20210630091037033.png" alt="image-20210630091037033"></p><p><img src="/2021/06/28/mybatisplus/image-20210630091311020.png" alt="image-20210630091311020"></p><p><img src="/2021/06/28/mybatisplus/image-20210630091451074.png" alt="image-20210630091451074"></p><p><img src="/2021/06/28/mybatisplus/image-20210630091639598.png" alt="image-20210630091639598"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch</title>
      <link href="2021/06/24/elasticsearch/"/>
      <url>2021/06/24/elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h1><h2 id="启动步骤"><a href="#启动步骤" class="headerlink" title="启动步骤"></a>启动步骤</h2><ol><li><strong>解析项目文件</strong></li></ol><blockquote><p>bin 启动文件</p><p>config 配置文件</p><p>​            log4j2 日志配置</p><p>​            jvm.options java 虚拟机相关配置</p><p>​            elasticsearch.yml elasticsearch的配置文件！默认：9200端口 跨域！</p><p>lib 相关jar包</p><p>modules：功能模块</p><p>plugins：插件</p><p>logs：日志</p></blockquote><ol start="2"><li><p><strong>双击bin/.bat 启动访问9200端口</strong></p></li><li><p><strong>访问测试</strong></p></li></ol><blockquote><p>安装可视化插件 elasticsearch head</p></blockquote><ol><li><p>需要安装node.js环境，npm环境</p><p>cnpm install</p><p>npm run start</p></li><li><p>完成跨域的配置</p></li></ol><p>跨域问题：跨网站、跨端口、跨ip</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">#配置跨域问题http.cors.enabled: truehttp.cors.allow-origin: "*"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>elasticsearch head的使用</li></ol><p>可以把es当作一个数据库（可以建立索引（库），文档（库中的数据））</p><p>==这个head我们就把它当作数据格式展示工具，我们后面所有的查询去kibana完成。==</p><blockquote><p>科普：</p><p>ELK是elasticsearch、Logstash、kibana三大开源框架简称。</p><ul><li><p>elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。</p></li><li><p>Logstash是ELK的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka等）。</p></li><li><p>kibana可以将elasticsearch的数据通过友好的页面展示出来，提供实时分析的功能。</p></li></ul></blockquote><ol start="4"><li>安装kibana</li></ol><p>kibana版本要和Es一致！</p><p>bin/.bat启动 5601端口访问</p><p>汉化，自己修改kibana配置即可zh-CN。</p><h2 id="ES核心概念"><a href="#ES核心概念" class="headerlink" title="ES核心概念"></a>ES核心概念</h2><blockquote><p>elasticsearch是面向文档，一切都是json。</p><p>关系型数据库和elasticsearch客观对比。</p></blockquote><table><thead><tr><th>Relational DB</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>数据库（database）</td><td>索引（indices）</td></tr><tr><td>表（tables）</td><td>types</td></tr><tr><td>行（rows）</td><td>documents</td></tr><tr><td>字段（columns）</td><td>fields</td></tr></tbody></table><p>elasticsearch（集群）中可以包含多个索引，每个索引中可以包含多个类型，每个类型下又包含多个文档，每个文档中又包含多个字段</p><p>物理设计：</p><p>elasticsearch在后台把每个索引划分成多个分片，每个分片可以在集群中的不同服务器间迁移。</p><p>逻辑设计：</p><blockquote><p>文档</p></blockquote><p>就是我们一条条数据。</p><p>因为elasticsearch是面向文档的，那么就意味着索引和搜索数据的最小单位是文档。</p><ul><li>一个文档中是同时包含键值对的，也就是字段和对应的值。</li><li>层次型：一个文档中包含自文档（就是一个json对象）</li><li>文档不依赖预先定义的模式，我么可以忽略字段或者动态添加一个字段。</li></ul><blockquote><p>字段：设置类型映射</p></blockquote><blockquote><p>索引</p></blockquote><p>就是数据库。</p><p>索引是映射类型的容器，elasticsearch中的索引是一个非常大的文档集合，索引存储了映射类型的字段和其他设置，然后他们被存储到了各个分片上。</p><h2 id="Rest-查询"><a href="#Rest-查询" class="headerlink" title="Rest 查询"></a>Rest 查询</h2><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>localhost：9200/索引名称/类型名称/文档id</td><td>创建文档（指定文档id）</td></tr><tr><td>POST</td><td>localhost：9200/索引名称/类型名称</td><td>创建文档（随机id）</td></tr><tr><td>POST</td><td>localhost：9200/索引名称/类型名称/文档id/_update</td><td>修改文档</td></tr><tr><td>DELETE</td><td>localhost：9200/索引名称/类型名称/文档id</td><td>删除文档</td></tr><tr><td>GET</td><td>localhost：9200/索引名称/类型名称/文档id</td><td>查询文档通过文档id</td></tr><tr><td>POST</td><td>localhost：9200/索引名称/类型名称/_search</td><td>查询所有的数据</td></tr></tbody></table><blockquote><p>基础测试</p></blockquote><ol><li><strong>创建索引规则</strong></li></ol><p><img src="/2021/06/24/elasticsearch/image-20210627223333504.png" alt="image-20210627223333504"></p><ol start="2"><li><strong>es中的数据类型</strong></li></ol><p><img src="/2021/06/24/elasticsearch/image-20210627223441909.png" alt="image-20210627223441909"></p><ol start="3"><li><strong>查询数据库</strong></li></ol><ul><li><p>get xxx</p></li><li><p>get _cat/(通过_cat命令可以获得当前数据库的信息)</p></li></ul><ol start="4"><li><strong>修改数据</strong></li></ol><ul><li>提交还是用put（会增加版本号，然后状态改成updated）弊端是修改需要重新提交所有的字段</li></ul><p><img src="/2021/06/24/elasticsearch/image-20210627224224977.png" alt="image-20210627224224977"></p><ul><li>使用post，可以部分修改</li></ul><p><img src="/2021/06/24/elasticsearch/image-20210627224540518.png" alt="image-20210627224540518"></p><ol start="5"><li><strong>删除索引</strong></li></ol><ul><li>通过DELETE命令实现删除，根据请求判断是删除索引还是删除文档信息</li></ul><ol start="6"><li><strong>查询（排序，分页，高亮，模糊查询，精确查询，多条件查询）</strong></li></ol><ul><li>查询结果展示</li></ul><p><img src="/2021/06/24/elasticsearch/image-20210628083606784.png" alt="image-20210628083606784"></p><ul><li>查询结构体显示，_source结果过滤，match匹配条件（同一字段值的多匹配，条件之间用空格隔开）</li></ul><p><img src="/2021/06/24/elasticsearch/image-20210628084409357.png" alt="image-20210628084409357"></p><p><img src="/2021/06/24/elasticsearch/image-20210628091522027.png" alt="image-20210628091522027"></p><ul><li>排序</li></ul><p><img src="/2021/06/24/elasticsearch/image-20210628084602769.png" alt="image-20210628084602769"></p><ul><li>分页查询（from是开始的序号，size是数据的条数）</li></ul><p><img src="/2021/06/24/elasticsearch/image-20210628084738816.png" alt="image-20210628084738816"></p><ul><li>精确查询与分词器查询</li></ul><p>关于查询分词：</p><ul><li><p>term，对于查询字段直接查询精确的（直接通过倒排索引指定的词条进程精确的查找）</p></li><li><p>match，对于查询字段会使用分词器查询（先分析文档，然后通过分析的文档进行）</p></li></ul><p>两个数据类型：</p><ul><li>text（可以被分词器解析）</li><li>keyword（不能被分词器解析）</li></ul><p><img src="/2021/06/24/elasticsearch/image-20210628124403005.png" alt="image-20210628124403005"></p><ul><li>使用分词器</li></ul><p><img src="/2021/06/24/elasticsearch/image-20210628124117491.png" alt="image-20210628124117491"></p><p>keyword：不使用分词器，作为整体</p><p>standard：标准模式</p><ul><li>布尔值查询，就是复杂查询（需要and、or、not等连接词）</li></ul><p><img src="/2021/06/24/elasticsearch/image-20210628090201971.png" alt="image-20210628090201971"></p><pre><code>    1. 多条件查询</code></pre><p>must（and），所有的条件都要符合where id=1 and name=xxx</p><p><img src="/2021/06/24/elasticsearch/image-20210628090353766.png" alt="image-20210628090353766"></p><p>should（or），满足一个条件就可以where id=1 or name=xxx</p><p><img src="/2021/06/24/elasticsearch/image-20210628090810945.png" alt="image-20210628090810945"></p><p>must_not（not），不满足条件的数据</p><p><img src="/2021/06/24/elasticsearch/image-20210628090944632.png" alt="image-20210628090944632"></p><ol start="2"><li>过滤器filter</li></ol><p>范围查询（gt大于，gte大于等于，It小于，Ite小于等于）</p><p><img src="/2021/06/24/elasticsearch/image-20210628091106443.png" alt="image-20210628091106443"></p><ul><li>高亮查询</li></ul><p><img src="/2021/06/24/elasticsearch/image-20210628125244946.png" alt="image-20210628125244946"></p><h2 id="整合springboot"><a href="#整合springboot" class="headerlink" title="整合springboot"></a>整合springboot</h2><p>注意点：</p><ol><li>需要查看es依赖的版本是否与es的版本一致</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>elasticsearch.version</span><span class="token punctuation">&gt;</span></span>7.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>elasticsearch.version</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>编写elasticsearch config文件</li></ol><p>我们需要RestHighLevelClient这个对象，我们要把它注入进去。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"elasticsearch.rest"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticSearchClientConfig</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uris<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RestHighLevelClient</span> <span class="token function">restHighLevelClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> uris<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> uris<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> host <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>uris<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>uris<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> uris<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">CredentialsProvider</span> credentialsProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicCredentialsProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        credentialsProvider<span class="token punctuation">.</span><span class="token function">setCredentials</span><span class="token punctuation">(</span><span class="token class-name">AuthScope</span><span class="token punctuation">.</span>ANY<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordCredentials</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RestClientBuilder</span> builder<span class="token operator">=</span><span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>host<span class="token punctuation">,</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHttpClientConfigCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RestClientBuilder<span class="token punctuation">.</span>HttpClientConfigCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token class-name">HttpAsyncClientBuilder</span> <span class="token function">customizeHttpClient</span><span class="token punctuation">(</span><span class="token class-name">HttpAsyncClientBuilder</span> httpClientBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        httpClientBuilder<span class="token punctuation">.</span><span class="token function">disableAuthCaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> httpClientBuilder<span class="token punctuation">.</span><span class="token function">setDefaultCredentialsProvider</span><span class="token punctuation">(</span>credentialsProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RestClient</span> restClient<span class="token operator">=</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RestHighLevelClient</span> client<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//分别为连接地址，连接端口号，连接的协议</span>            <span class="token keyword">return</span> client<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在注入的时候，@Autowired是按照对象类型进行注入的，对象名字要与之匹配，如果不匹配的话需要@Qualifier按照名字进行注入</p><p>可以去springboot-autoconfigure 去查看依赖的默认配置</p><p>分析源码步骤，先看有几个bean</p><blockquote><p>实战</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">RestHighLevelClient</span> client<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>索引的相关操作</li></ol><p><img src="/2021/06/24/elasticsearch/image-20210623131234932.png" alt="image-20210623131234932"></p><p><img src="/2021/06/24/elasticsearch/image-20210623131524666.png" alt="image-20210623131524666"></p><p><img src="/2021/06/24/elasticsearch/image-20210623131655970.png" alt="image-20210623131655970"></p><ol start="2"><li><p>文档的相关操作</p><ol><li>创建实体类</li></ol><p><img src="/2021/06/24/elasticsearch/image-20210624171827939.png" alt="image-20210624171827939"></p><ol start="2"><li>添加文档</li></ol><p><img src="/2021/06/24/elasticsearch/image-20210624172943524.png" alt="image-20210624172943524"></p><ol start="3"><li>获取文档</li></ol><p><img src="/2021/06/24/elasticsearch/image-20210624173244284.png" alt="image-20210624173244284"></p><ol start="4"><li>获取文档的信息</li></ol><p><img src="/2021/06/24/elasticsearch/image-20210624173414728.png" alt="image-20210624173414728"></p><ol start="5"><li>更新文档记录</li></ol><p><img src="/2021/06/24/elasticsearch/image-20210624200025860.png" alt="image-20210624200025860"></p><ol start="6"><li>删除文档记录</li></ol><p><img src="/2021/06/24/elasticsearch/image-20210624200205829.png" alt="image-20210624200205829"></p><ol start="7"><li>批量插入数据</li></ol><p><img src="/2021/06/24/elasticsearch/image-20210624200532287.png" alt="image-20210624200532287"></p><ol start="8"><li>查询数据</li></ol><p><img src="/2021/06/24/elasticsearch/image-20210624201321306.png" alt="image-20210624201321306"></p></li></ol><p>其中主要的是SearchRequest和SearchSourceBuilder条件构造</p>]]></content>
      
      
      <categories>
          
          <category> 后端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="2021/06/04/redis/"/>
      <url>2021/06/04/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h2 id="为什么要用nosql"><a href="#为什么要用nosql" class="headerlink" title="为什么要用nosql"></a>为什么要用nosql</h2><blockquote><p>1.整个网站的瓶颈</p></blockquote><p>1.数据超过300万条就必须建立索引</p><p>2.访问量（读写混合），一个服务器承受不了</p><blockquote><p>2.memcached（缓存）+MySQL+垂直拆分</p><blockquote><p>发展过程：</p><p>1.优化数据结构和索引</p><p>2.文件缓存（IO）</p><p>3.Memcached（高速缓存）</p></blockquote></blockquote><p>1.网站80%的数据量都是在查询，所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率。（缓存只能解决读的问题）</p><blockquote><p>3.分库分表+水平拆分+MySQL集群</p></blockquote><p>我所认为的集群的概念是由数台服务器组成，都在完成一个功能，可看作成一个节点。</p><p>在第二阶段主要解决的是读的压力，第三个阶段主要是去解决写的压力。</p><blockquote><p>1.切换数据库引擎，由MyISAM-&gt;Innodb</p><p>MyISAM：表锁，效率低下</p><p>Innodb：行锁</p><p>2.使用分库分表技术</p><p>根据不同的业务</p><p>3.MySQL集群</p></blockquote><blockquote><p>4.如今最近的年代</p></blockquote><p>数据量大，且发生变化快。MySQL为代表的关系型数据库已经不能满足业务了（如定位信息，排行榜信息）数据库的IO压力下，表几乎没法变更大。</p><p><img src="/2021/06/04/redis/image-20210522204209224.png" alt="image-20210522204209224"></p><center>当今互联网架构图</center><blockquote><p>为什么要用NoSQL！</p></blockquote><p>用户的个人信息，社交网络，地理位置，用户自己产生的数据，用户日志等等爆发式增长。nosql可以很好的处理这种情况。</p><h2 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h2><blockquote><p>Nosql</p></blockquote><p>Nosql=Not Only SQL（不仅仅是SQL）</p><p>关系型数据库：表格+行+列</p><p>泛指非关系型数据库，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区。</p><p>很多的数据类型用户的个人信息，社交网路，地理位置。这些数据的存储不需要一个固定的格式。redis就是通过类似于Java中的Map键值对来存储。</p><blockquote><p>Nosql特点</p></blockquote><p>解耦：</p><p>1.方便扩展（数据之间没有关系，很好扩展）</p><p>2.大数据量提高性能（Redis一秒写8万次，读取11万，Nosql的缓存记录是一种细粒度的缓存）</p><p>3.数据类型是多样型的（不需要事先设计数据库）</p><p>4.传统RDBMS和NoSQL</p><blockquote><p>传统的RDBMS</p><ul><li>结构化组织</li><li>SQL</li><li>数据和关系都存在单独的表中</li><li>数据操作语言，数据定义语言</li><li>严格的一致性</li><li>基础的事务</li></ul></blockquote><blockquote><p>Nosql</p><ul><li>不仅仅是数据库</li><li>没有固定的查询语言</li><li>键值对存储、列存储、文档存储、图型数据库</li><li>最终一致性</li><li>CAP定理和BASE（异地多活）</li><li>高并发、高可用、高可扩展（随时水平拆分）</li></ul></blockquote><p>大数据时代的3V+3高</p><p>大数据时代的3V：主要是描述问题的（海量、多样、实时）</p><p>大数据时代的3高：主要是对程序的要求</p><p>敏捷开发、极限编程</p><p>==去除差异化可以通过加一层来实现。==（比如连接多个版本数据库，业务模型的各个字段分布在不同数据源）添加了jdbc或者mybatis来连接数据库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.商品的基本信息</span>  名称、价格、商家信息；  在关系型数据库就可以解决 MySQL/Oracle（淘宝早年去IOE） 王坚<span class="token comment">#2.商品的描述，评论（文字比较多）</span>文档型数据库，MongDB<span class="token comment">#3.图片</span>分布式文件系统 FastDFS- 淘宝自己的 TFS- Google GFS- Hadoop HDFS- 阿里云的 oss<span class="token comment">#4.商品的关键字（搜索）</span>- 搜索引擎 Isearch 多隆<span class="token comment">#5.商品热门的波段信息</span>-内存数据库- Redis Tair<span class="token comment">#6.商品的交易，外部的支付接口</span>- 三方应用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大型互联网应用信息：</p><ul><li>数据类型太多了</li><li>数据源繁多，经常重构</li><li>数据要改造，大面积改动</li></ul><p>==解决方案：统一数据服务平台（UDSL）==</p><h2 id="NoSQL的四大分类"><a href="#NoSQL的四大分类" class="headerlink" title="NoSQL的四大分类"></a>NoSQL的四大分类</h2><p><strong>kv键值对（内容缓存）：</strong></p><ul><li>新浪：<strong>Redis</strong></li><li>美团：Redis+Tair </li><li>阿里、百度：Redis+memecache</li></ul><p><strong>文档型数据库（bson格式和json一样）</strong></p><ul><li><strong>MongoDB</strong>：<ul><li>MongoDB是一个基于分布式文件存储系统的数据库，主要用于处理大量的文档</li><li>MongoDB是一个介于关系型数据库和非关系型数据库中中间的产品！MongoDB是非关系型数据库中功能最丰富，最像关系型数据库。</li></ul></li></ul><p><strong>列存储数据库</strong> </p><ul><li><strong>HBase</strong></li><li>分布式文件系统</li></ul><p><strong>图关系型数据库</strong></p><ul><li>他存放的是关系，应用场景比如：朋友圈社交网络，广告推荐！</li><li><strong>Neo4j</strong>，InfoGrid</li></ul><h2 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h2><blockquote><p>Redis是什么</p></blockquote><p>Redis（Remote Dictionary Server），即远程服务字典</p><p>支持网络、可基于内存和持久化的日志型，kv数据库</p><blockquote><p>Redis能干什么</p></blockquote><p>1.内存存储，持久化，因为内存中断电即失，所以持久化很重要（rdb，aof）</p><p>2.效率高，可以用于高速缓存</p><p>3.发布订阅系统</p><p>4.地图信息分析</p><p>5.计时器、计数器（浏览量）</p><blockquote><p>特性</p></blockquote><ol><li><p>多样的数据类型</p></li><li><p>持久化</p></li><li><p>集群</p></li><li><p>事务</p></li></ol><blockquote><p>学习中需要用到的东西</p></blockquote><ol><li>官网</li><li>中文网</li><li>下载地址</li></ol><p>（windows在Github上下载）</p><p>redis推荐是在Linux服务器上搭建的</p><h2 id="Redis下载安装"><a href="#Redis下载安装" class="headerlink" title="Redis下载安装"></a>Redis下载安装</h2><blockquote><ol><li>下载相关文件压缩包，并解压</li><li>下载运行环境（gcc）</li></ol><ul><li>```bash<br>yum install gcc-c++<pre class="line-numbers language-none"><code class="language-none">- make编译原文件 - make test 编译测试- make install编译安装1. 修改redis.conf 配置文件    * daemonize yes2. 启动redis-redis-server /.../ 配置文件的目录3. 访问redis-redis-cliRedis-benchmark是一个压力测试工具## 基础知识redis是一个基于内存存储的数据库系统，它可以用作数据库、缓存和消息中间件redis默认有16个数据库，默认使用的是第0个```bash#切换第几个数据库select x#查看数据库大小DBSIZE#查看所有的keykeys *#清空当前库flushdb#清空所有数据库flushall#是否存在键exists key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><blockquote><p>redis是单线程</p></blockquote><p>redis是基于内存操作的，CPU利用率不是Redis的性能瓶颈，Redis的瓶颈是根据机器的内存和网络带宽，既然可以使用单线程来实现，就可以使用单线程了。</p><p>多线程还要涉及频繁的上下文切换</p><h2 id="redis基本类型"><a href="#redis基本类型" class="headerlink" title="redis基本类型"></a>redis基本类型</h2><p><strong>String类型</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#像一条记录后面添加字符串</span>append xxx <span class="token string">"xxx"</span><span class="token comment">#获取字符串长度</span>strlen xxx<span class="token comment">#实现++操作</span>incr xxxincrby xxx <span class="token number">10</span><span class="token comment">#实现--操作</span>decr xxxdecrby xxx <span class="token number">10</span><span class="token comment">#获得字符串某一区间的值(包括头尾)</span>getrange xxx <span class="token number">0</span> <span class="token number">3</span><span class="token comment">#修改某一字符串区间的值（offset为开始的下标）</span>setrange xxx offset xxx<span class="token comment">#setex(set with expire) 设置过期时间</span>setex xxx <span class="token number">30</span> <span class="token string">"ghjk"</span><span class="token comment">#setnx(set if not exist) 不存在再设置，在分布式锁中会常常使用</span><span class="token comment">#批量设置</span>mset k1 xxx k2 yyy k3 zzzmget k1 k2 k3msetnx<span class="token comment">#设置对象</span><span class="token builtin class-name">set</span> customer:1 <span class="token punctuation">{</span>name:james, age:9<span class="token punctuation">}</span>mset customer:2:name james customer:2:age <span class="token number">9</span><span class="token comment">#getset 先get后set</span>getset db redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>String的使用场景：可以是字符串还可以是数字</p><ul><li>计数器</li><li>统计多单位的数量 </li><li>粉丝数</li><li>对象缓存存储</li></ul><p><strong>List</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#向列表中添加值</span>LPUSH xxx oneRPUSH xxx twolset list 下标 xxx<span class="token comment">#从列表中获取在下标范围中的值</span>LRANGE list <span class="token number">0</span> -1<span class="token comment">#从列表中移除元素</span>Lpop list <span class="token comment">#移除list的第一个元素</span>Rpop list <span class="token comment">#移除list的最后一个</span>Lindex xxx <span class="token number">1</span> <span class="token comment">#通过下标获取list的值</span>Llen xxx <span class="token comment">#获取列表的长度</span>Lrem list （个数） xxx <span class="token comment">#从列表中移除制定的value及个数</span>ltrim list <span class="token number">1</span> <span class="token number">2</span> <span class="token comment">#通过下标的长度来截取列表长度</span>rpoplpush list1 list2 linsert list before <span class="token string">"world"</span> <span class="token string">"other"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Set</strong></p><p>set中的值是不重复的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#set集合中添加值</span>sadd myset xxx<span class="token comment"># 查看指定set的所有值</span>smembers <span class="token builtin class-name">set</span><span class="token comment">#查看指定set的值是不是在集合中</span>sismember <span class="token builtin class-name">set</span> xxx<span class="token comment">#获取set集合中的内容元素的个数</span>scard <span class="token builtin class-name">set</span><span class="token comment">#移除set集合中的指定元素</span>srem <span class="token builtin class-name">set</span> xxx<span class="token comment">#随机获取number个元素</span>srandmember <span class="token builtin class-name">set</span> number<span class="token comment">#随机删除set集合中的元素</span>spop <span class="token builtin class-name">set</span><span class="token comment">#将一个集合中指定的值xxx移动到另一个集合</span>smove set1 set2 xxx<span class="token comment">#数字集合类（set1-set2）</span><span class="token function">sdiff</span> set1 set2 差集sinter set1 set2 交集sunion set1 set2 并集<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>粉丝共同关注</p><p><strong>Hash</strong></p><p>是一个集合，存储的value是键值对的方式,本质和string类型没有太大的区别</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#存取查</span>hset myhash xxx xxxhget myhash xxxhgetall myhashhmsethmgethdel myhash xxxhlen myhash <span class="token comment">#获取集合中的字段数量</span>hkeys myhashhvalues myhashhincrhdecrhexists<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hash用来存放变更的信息，尤其是用户信息的保存。hash更适合对象的存储，String更适合字符串的方式。</p><p><strong>Zset（有序集合）</strong></p><p>在set的基础上，添加一个值，add set xxx || zadd set score xxx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#根据score进行排序</span>zrangebyscore zset -inf +inf withscoreszrange salary <span class="token number">0</span> -1zrerange salary <span class="token number">0</span> -1 <span class="token comment">#移除任务中的元素</span>zrem zset xxx<span class="token comment">#获取集合中的个数</span>zcard salary<span class="token comment">#获取集合范围为n1到n2的个数</span>zcount salary n1 n2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例思路：</p><p>对set集合进行排序，还可以存储班级成绩，工资表排序，</p><p>对代权重的值进行判断，如普通消息为1，重要消息为2</p><p>排行榜应用场景</p><p><strong>Steam</strong></p><p>管道技术，redis有订阅和发布的功能，可以做消息队列，但是不能持久化，关机之后消息会丢失</p><p>Redis Stream是一个消息链表，其结构如下所示：</p><p><img src="/2021/06/04/redis/image-20210618142359319.png" alt="image-20210618142359319"></p><blockquote><p><strong>消息链表结构：</strong></p><ul><li><strong>Consumer Group</strong> ：消费组，使用 XGROUP CREATE 命令创建，一个消费组有多个消费者(Consumer)。</li><li><strong>last_delivered_id</strong> ：游标，每个消费组会有个游标 last_delivered_id，任意一个消费者读取了消息都会使游标 last_delivered_id 往前移动。</li><li><strong>pending_ids</strong> ：消费者(Consumer)的状态变量，作用是维护消费者的未确认的 id。 pending_ids 记录了当前已经被客户端读取的消息，但是还没有 ack (Acknowledge character：确认字符）。</li></ul><p><strong>消息队列相关命令：</strong></p><ul><li><strong>XADD</strong> - 添加消息到末尾</li><li><strong>XTRIM</strong> - 对流进行修剪，限制长度</li><li><strong>XDEL</strong> - 删除消息</li><li><strong>XLEN</strong> - 获取流包含的元素数量，即消息长度</li><li><strong>XRANGE</strong> - 获取消息列表，会自动过滤已经删除的消息</li><li><strong>XREVRANGE</strong> - 反向获取消息列表，ID 从大到小</li><li><strong>XREAD</strong> - 以阻塞或非阻塞方式获取消息列表</li></ul><p><strong>消费者组相关命令：</strong></p><ul><li><strong>XGROUP CREATE</strong> - 创建消费者组</li><li><strong>XREADGROUP GROUP</strong> - 读取消费者组中的消息</li><li><strong>XACK</strong> - 将消息标记为”已处理”</li><li><strong>XGROUP SETID</strong> - 为消费者组设置新的最后递送消息ID</li><li><strong>XGROUP DELCONSUMER</strong> - 删除消费者</li><li><strong>XGROUP DESTROY</strong> - 删除消费者组</li><li><strong>XPENDING</strong> - 显示待处理消息的相关信息</li><li><strong>XCLAIM</strong> - 转移消息的归属权</li><li><strong>XINFO</strong> - 查看流和消费者组的相关信息；</li><li><strong>XINFO GROUPS</strong> - 打印消费者组的信息；</li><li><strong>XINFO STREAM</strong> - 打印流信息</li></ul><p>具体详见<a href="https://www.runoob.com/redis/redis-stream.html">https://www.runoob.com/redis/redis-stream.html</a></p></blockquote><h2 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h2><p><strong>geospatial 地理位置</strong></p><p>应用场景：</p><p>朋友的定位、附近的人、打车距离计算</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加地理位置 geoadd （集合） 经度 纬度 城市名</span>geoadd china:city <span class="token number">116.40</span> <span class="token number">39.90</span> beijinggeoadd china:city <span class="token number">116.40</span> <span class="token number">39.90</span> chongqing<span class="token comment"># 返回两个给定位置之间的距离</span><span class="token comment">#单位如下：m、km、mi（英里）、ft（英尺）</span>geodist china:city beijing chongqing km<span class="token comment">#命令返回11个字符的geohash字符串,将二维的经纬度转换为一维的字符串，如果连个字符串越像位置越接近</span>geohash china:city beijing chongqing<span class="token comment">#从key里返回所有给定元素的位置</span>geopos china:city beijing chongqing<span class="token comment">#以给定的经纬度为中心，找出某一半径内的元素</span>georadius china:city <span class="token number">100</span> <span class="token number">30</span> 1000km withdist withcoord count number<span class="token comment">#用于找出位于指定范围内的元素，中心点是由给定的位置元素决定</span>georadiusbymember china:city beijing 1000km<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于zset封装，可以用zrem删除</p><p><strong>Hyperloglog</strong></p><blockquote><p>用于基数统计的算法</p><p>基数，是集合中不重复数字的数量</p></blockquote><p><strong>应用场景：网页的uv（一个人访问多次还是算作一个人）</strong></p><p>传统的方式，set保存用户的ID，然后就可以统计set中的元素数量作为标准的判断。这个方式如果保存大量的用户ID，与我们的意愿相违背。</p><p>优点：占用的内存是固定的，2^ 64不同的元素技术，只需要12kb。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PFadd mykey a b c d e f g h i jPFcount mykey PFmerge mykey mykey1 mykey2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果可以容错，可以使用hperloglog，有0.81%的错误率</p><p><strong>bitmaps</strong></p><p>位存储</p><p>统计疫情感染人数</p><p>统计用户信息，活跃与不活跃 登陆与未登录 只有两个状态的都可以使用bitmaps</p><p>bitmaps位图，都是操作二进制位来进行记录，只有0和1两个状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用bitmap来记录周一到周日的打卡</span>setbit sign <span class="token number">0</span> <span class="token number">1</span>setbit sign <span class="token number">1</span> <span class="token number">1</span>setbit sign <span class="token number">2</span> <span class="token number">1</span>setbit sign <span class="token number">3</span> <span class="token number">1</span>setbit sign <span class="token number">4</span> <span class="token number">1</span><span class="token comment">#查看某一天是否有打卡</span>getbit sign <span class="token number">0</span>getbit sign <span class="token number">1</span><span class="token comment">#统计打卡的天数(1)</span>bitcount sign<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>==Redis单条命令是保证原子性的，但是事务是不保证原子性、隔离性的。==</p><p>Redis事务本质：一组命令的集合。一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行，具有一次性、顺序性、排他性。</p><p>所有的命令在事务中，并没有直接被执行，只有发起执行命令的时候才会被执行。</p><p>Redis的事务：</p><ul><li>开启事务（multi）</li><li>命令入队（。。。）</li><li>执行命令（exec）</li></ul><p>锁：Redis可以实现乐观锁</p><blockquote><p>正常执行事务</p></blockquote><p><img src="/2021/06/04/redis/image-20210603193209476.png" alt="image-20210603193209476"></p><blockquote><p>放弃事务</p></blockquote><p><img src="/2021/06/04/redis/image-20210603193530871.png" alt="image-20210603193530871"></p><blockquote><p>编译型异常（代码有问题！命令有错），事务中所有的命令都不会被执行</p></blockquote><p><img src="/2021/06/04/redis/image-20210603194435757.png" alt="image-20210603194435757"></p><blockquote><p>运行时异常，如果事务队列中存在语法性，那么执行命令的时候，其他命令可以正常执行的。</p></blockquote><p><img src="/2021/06/04/redis/image-20210603194548018.png" alt="image-20210603194548018"></p><blockquote><p>监控watch：</p></blockquote><p><strong>悲观锁：</strong></p><ul><li>很悲观，认为数据会发生并发问题，所以无论做什么都会加锁</li></ul><p><strong>乐观锁：</strong></p><ul><li>很乐观，认为什么时候不会出错，所以不会上锁。在更新数据的时候会去判断一下，在此期间是否有人修改过这个数据。</li><li>获取version</li><li>更新的时候比较version</li></ul><blockquote><p>Redis测监视测试：</p></blockquote><p><img src="/2021/06/04/redis/image-20210603200019697.png" alt="image-20210603200019697"></p><p>在执行事务的时候，其他线程对money字段进行了修改，由于监视了money字段，导致事务执行失败，保证了数据的正确性。之后先unwatch解锁，在watch加锁。</p><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><blockquote><p>分区是分隔数据到多个Redis实例的处理过程，因此每个实例只保存key的一个子集</p></blockquote><p>分区的优势：</p><ul><li>通过利用多台计算机内存和值，允许我们构造更大的数据库</li><li>通过多核和多台计算机，拓展计算能力；通过多台计算机和网络适配器，拓展网络带宽</li></ul><p>分区的不足：</p><ul><li>涉及多个key的操作通常是不被支持的。举例来说，当两个set映射到不同的redis实例上时，你就不能对这两个set执行交集操作。</li><li>涉及多个key的redis事务不能使用。</li><li>当使用分区时，数据处理较为复杂，比如你需要处理多个rdb/aof文件，并且从多个实例和主机备份持久化文件。</li><li>增加或删除容量也比较复杂。redis集群大多数支持在运行时增加、删除节点的透明数据平衡的能力，但是类似于客户端分区、代理等其他系统则不支持这项特性。然而，一种叫做presharding的技术对此是有帮助的。</li></ul><blockquote><p>分区类型：</p></blockquote><ol><li>范围分区（根据id的范围划分）</li><li>哈希分区（对key的值进行hash，之后进行取余操作）</li></ol><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><blockquote><p>Jedis是Redis官方推荐的Java连接工具，使用Java操作Redis的中间件。</p></blockquote><blockquote><p>测试</p></blockquote><p>1.导入对应的依赖</p><p>2.编码测试</p><ul><li>连接数据库</li><li>操作命令</li><li>断开连接</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.new Jedis对象</span><span class="token class-name">Jedis</span> jedis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jedis所有的命令就是我们之前学习的命令</span>jedis<span class="token punctuation">.</span>xxx<span class="token comment">//查看jedis是否连接成功</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printLn</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//jedis 事务</span><span class="token comment">//1.new Jedis对象</span><span class="token class-name">Jedis</span> jedis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JSONObject</span> jsonObject<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"kuangshen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启事务</span><span class="token class-name">Transaction</span> multi<span class="token operator">=</span>jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> result<span class="token operator">=</span>jsonObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>  multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  multi<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行事务</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>  mult<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放弃事务</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printLn</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printLn</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h2><p>springboot操作数据库，使用springData框架。</p><blockquote><p>引入依赖</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说明：在SpringBoot2.x之后，原来使用的jedis被替换成了lettuce</p><p>原因：</p><ul><li>jedis：采用的直连server的模式，多个线程操作的话，是不安全的，如果想要避免不安全的，要使用jedis pool链接池，更像BIO。</li><li>采用netty，实例可以再多个线程中进行共享，不存在线程不安全的情况。更像NIO模式</li></ul><p>==Springboot所有的配置类，都有一个自动配置类 RedisAutoConfiguration 自动配置类都会绑定一个properties 配置文件 RedisProperties==</p><blockquote><p>配置</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//默认的RedisTemplate没有过多的设置，redis对象是需要序列化的。</span>    <span class="token comment">//两个范性都是Object类型，后期我们需要强转类型。</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token comment">//由于String类型是我们最常使用的类型，所以单独提出了一个bean类型</span><span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">StringRedisTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jedis配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"resource-manage.spring.redis"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfigRM</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> database<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> timeout<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxActive<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> maxWait<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> shutdownTimeout<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxIdle<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> minIdle<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RedisConnectionFactory</span> <span class="token function">getRedisConnectionFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> hostName<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span>                                                            <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token keyword">int</span> maxIdle<span class="token punctuation">,</span> <span class="token keyword">int</span> maxTotal<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span>                                                            <span class="token keyword">long</span> maxWaitMillis<span class="token punctuation">,</span><span class="token keyword">int</span> minIdle<span class="token punctuation">,</span><span class="token keyword">long</span> shutdown<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 是负责建立Factory的连接工厂类</span>        <span class="token class-name">RedisStandaloneConfiguration</span> redisStandaloneConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisStandaloneConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisStandaloneConfiguration<span class="token punctuation">.</span><span class="token function">setHostName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisStandaloneConfiguration<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            redisStandaloneConfiguration<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">RedisPassword</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            redisStandaloneConfiguration<span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token comment">//设置连接池</span>        <span class="token class-name">JedisPoolConfig</span> jedisPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//最大连接数</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>maxTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>maxIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//最小空闲连接数</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span>minIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当池内没有可用的连接时，最大等待时间</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span>maxWaitMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setEvictorShutdownTimeoutMillis</span><span class="token punctuation">(</span>shutdown<span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JedisClientConfiguration<span class="token punctuation">.</span>JedisPoolingClientConfigurationBuilder</span> jpcb <span class="token operator">=</span>               <span class="token punctuation">(</span><span class="token class-name">JedisClientConfiguration<span class="token punctuation">.</span>JedisPoolingClientConfigurationBuilder</span><span class="token punctuation">)</span><span class="token class-name">JedisClientConfiguration</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定jedisPoolConifig来修改默认的连接池构造器（真麻烦，滥用设计模式！）</span>        jpcb<span class="token punctuation">.</span><span class="token function">poolConfig</span><span class="token punctuation">(</span>jedisPoolConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过构造器来构造jedis客户端配置</span>        <span class="token class-name">JedisClientConfiguration</span> jedisClientConfiguration <span class="token operator">=</span> jpcb<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">(</span>redisStandaloneConfiguration<span class="token punctuation">,</span> jedis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上手测试</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RedisConnection</span> connection<span class="token operator">=</span>redisTemplate<span class="token punctuation">.</span><span class="token function">getConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">flushDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">flushAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//其他操作</span><span class="token comment">//操作字符串</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">,</span><span class="token string">"ffff"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作List</span>redisTemplate<span class="token punctuation">.</span>opsForList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">,</span><span class="token string">"yy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//真实的开发中一般都使用json来传递对象，所有的对象都需要序列化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Redis-conf详解"><a href="#Redis-conf详解" class="headerlink" title="Redis.conf详解"></a>Redis.conf详解</h2><p>启动的时候通过配置文件来启动的。</p><blockquote><p>单位</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Redis configuration file example.</span><span class="token comment">#</span><span class="token comment"># Note that in order to read the configuration file, Redis must be</span><span class="token comment"># started with the file path as first argument:</span><span class="token comment">#</span><span class="token comment"># ./redis-server /path/to/redis.conf</span><span class="token comment"># Note on units: when memory size is needed, it is possible to specify</span><span class="token comment"># it in the usual form of 1k 5GB 4M and so forth:</span><span class="token comment">#</span><span class="token comment"># 1k =&gt; 1000 bytes</span><span class="token comment"># 1kb =&gt; 1024 bytes</span><span class="token comment"># 1m =&gt; 1000000 bytes</span><span class="token comment"># 1mb =&gt; 1024*1024 bytes</span><span class="token comment"># 1g =&gt; 1000000000 bytes</span><span class="token comment"># 1gb =&gt; 1024*1024*1024 bytes</span><span class="token comment">#</span><span class="token comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置文件unit单位对大小写不敏感</li></ol><blockquote><p>包含</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################## INCLUDES ###################################</span><span class="token comment"># Include one or more other config files here.  This is useful if you</span><span class="token comment"># have a standard template that goes to all Redis servers but also need</span><span class="token comment"># to customize a few per-server settings.  Include files can include</span><span class="token comment"># other files, so use this wisely.</span><span class="token comment">#</span><span class="token comment"># Note that option "include" won't be rewritten by command "CONFIG REWRITE"</span><span class="token comment"># from admin or Redis Sentinel. Since Redis always uses the last processed</span><span class="token comment"># line as value of a configuration directive, you'd better put includes</span><span class="token comment"># at the beginning of this file to avoid overwriting config change at runtime.</span><span class="token comment">#</span><span class="token comment"># If instead you are interested in using includes to override configuration</span><span class="token comment"># options, it is better to use include as the last line.</span><span class="token comment">#</span><span class="token comment"># include /path/to/local.conf</span><span class="token comment"># include /path/to/other.conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以import其他的配置文件</p><blockquote><p>网络</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">bind</span> <span class="token number">127.0</span>.0.1 -::1 <span class="token comment">#绑定的ip</span>protected-mode <span class="token function">yes</span> <span class="token comment">#保护模式</span>port <span class="token number">6379</span> <span class="token comment">#端口设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>通用</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">daemonize <span class="token function">yes</span> <span class="token comment">#开启守护进程，</span>supervised no <span class="token comment">#管理守护进程的，默认是no不需要动</span>pidfile /var/run/redis_6379.pid <span class="token comment">#配置文件的pid文件（如果是以后台的方式运行，我们就需要指定一个进程的pid文件）</span><span class="token comment"># Specify the server verbosity level.</span><span class="token comment"># This can be one of:</span><span class="token comment"># debug (a lot of information, useful for development/testing)</span><span class="token comment"># verbose (many rarely useful info, but not a mess like the debug level)一般用于测试和开发阶段</span><span class="token comment"># notice (moderately verbose, what you want in production probably)生产环境（默认）</span><span class="token comment"># warning (only very important / critical messages are logged)只打印很关键的信息</span>loglevel notice  <span class="token comment">#日志监控级别</span>logfile <span class="token string">""</span> <span class="token comment">#生成的日志文件名（为空是一个标准的输出）</span>databases <span class="token number">16</span> <span class="token comment">#默认的数据库数量</span>always-show-logo no <span class="token comment">#是否显示logo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>快照 snapshotting</p></blockquote><p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件主要分为.rdb和.aof</p><p>redis是内存数据库，如果没有持久化，那么数据库断电就丢失了所有的内容。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">save <span class="token number">3600</span> <span class="token number">1</span> <span class="token comment">#如果3600秒内，如果至少有1个key进行了修改，我们就进行持久化操作</span>save <span class="token number">300</span> <span class="token number">100</span>save <span class="token number">60</span> <span class="token number">10000</span>stop-writes-on-bgsave-error <span class="token function">yes</span> <span class="token comment">#如果持久化出现错误后，是否还要继续工作</span>rdbcompression <span class="token function">yes</span> <span class="token comment">#是否压缩rdb文件，需要消耗cpu资源</span>rdbchecksum <span class="token function">yes</span> <span class="token comment">#保存rdb文件时，是否检查校验rdb文件</span><span class="token function">dir</span> ./ <span class="token comment">#文件默认生成的目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>REPLICATION 主从复制</p></blockquote><blockquote><p>security 安全</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">config get requirepassconfig <span class="token builtin class-name">set</span> requirepass <span class="token string">'123456'</span>auth <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>限制CLIENTS</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">maxclients <span class="token number">10000</span> <span class="token comment">#默认的客户端连接数</span>maxmemory <span class="token operator">&lt;</span>bytes<span class="token operator">&gt;</span> <span class="token comment">#redis最大内存设置</span>maxmemory-policy noeviction <span class="token comment">#内存满了的处理策略</span><span class="token comment">#移除一些过期的key</span><span class="token comment">#报错。。。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/06/04/redis/image-20210624131915836.png" alt="image-20210624131915836"></p><blockquote><p>APPEND ONLY MODE aof配置</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">appendonly no <span class="token comment">#默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用</span>appendfilename <span class="token string">"appendonly.aof"</span> <span class="token comment">#持久化的文件名字</span><span class="token comment"># appendfsync always #每次修改都会同步写入，会消耗性能</span>appendfsync everysec <span class="token comment">#每秒执行一次同步，可能会丢失这1秒的数据</span><span class="token comment"># appendfsync no #不同步，这个时候操作系统自己同步数据，redis速度是最快的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><blockquote><p>Redis是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以Redis提供了持久化功能。</p></blockquote><h3 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB(Redis DataBase)"></a>RDB(Redis DataBase)</h3><blockquote><p>什么是RDB</p></blockquote><p><img src="/2021/06/04/redis/image-20210707214913167.png" alt="image-20210707214913167"></p><p>在指定的时间间隔将内存中的数据集快照（Snapshot）写入磁盘，他回复时将快照文件直接读到内存里。</p><p>Redis会独立创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个历史文件替换上次持久化好的文件。整个过程中，主程序是不进行任何IO操作的。这就确保了极高的性能，如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p><p>rdb保存的文件是：dump.rdb文件，都是在配置文件中快照进行配置的。</p><p>==对顺序没有要求的开线程完成==</p><blockquote><p>触发机制：</p></blockquote><ol><li>save的规则满足的情况下，会自动触发rdb原则</li><li>执行flushall命令，也会触发我们的rdb原则</li><li>退出redis，也会自动产生rdb文件</li></ol><blockquote><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p>使用 <code>save</code> 命令，会立刻对当前内存中的数据进行持久化 ,但是会阻塞，也就是不接受其他操作了；（由于 <code>save</code> 命令是同步命令，会占用Redis的主进程。若Redis数据非常多时，<code>save</code>命令执行速度会非常慢，阻塞所有客户端的请求。）</p><h4 id="flushall命令"><a href="#flushall命令" class="headerlink" title="flushall命令"></a>flushall命令</h4><p><code>flushall</code> 命令也会触发持久化 ；当满足配置条件中的触发条件 ；</p><p><img src="/2021/06/04/redis/image-20210708122931381.png" alt="image-20210708122931381"></p><h4 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h4><p><code>bgsave</code> 是异步进行，进行持久化的时候，<code>redis</code> 还可以将继续响应客户端请求 ；</p><p><img src="/2021/06/04/redis/image-20210708123041030.png" alt="image-20210708123041030"></p></blockquote><blockquote><p>如何恢复rdb文件：</p></blockquote><p>1.只需要将rdb文件放在我们redis启动目录就可以了，redis启动的时候会自动检查dump.rdb文件恢复其中的数据。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> config get <span class="token function">dir</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">"dir"</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">"/usr/local/bin"</span> <span class="token comment">#如果在这个目录下存在dump.rdb文件，启动就会自动恢复其中的数据。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>RDB优缺点</p></blockquote><p><strong>优点：</strong></p><ol><li>适合大规模的数据恢复</li><li>对数据的完整性要求不高</li></ol><p><strong>缺点：</strong></p><ol><li>需要一定的时间间隔进行操作，如果redis意外宕机了，这个最后一次修改的数据就没有了。</li><li>fork进程的时候，会占用一定的内容空间。</li></ol><h3 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h3><p>将我们所有的命令都记录下来，history，恢复的时候就把这个文件全部再执行一遍。</p><p>以日志的形式来记录每个写的操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><p> 快照功能（RDB）并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、以及未保存到快照中的那些数据。 从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。</p><p><img src="/2021/06/04/redis/image-20210708125427966.png" alt="image-20210708125427966"></p><p>如果要使用AOF，需要修改配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">appendonly <span class="token function">yes</span>  <span class="token comment"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分的情况下，rdb完全够用</span>appendfilename <span class="token string">"appendonly.aof"</span> <span class="token comment">#aof文件的名字</span><span class="token comment"># appendfsync always # 每次修改都会sync 消耗性能</span>appendfsync everysec <span class="token comment"># 每秒执行一次 sync 可能会丢失这一秒的数据</span><span class="token comment"># appendfsync no # 不执行 sync ,这时候操作系统自己同步数据，速度最快</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/06/04/redis/image-20210708130503250.png" alt="image-20210708130503250"></p><p>如果aof文件大于64m，会fork一个新的进程来将我们的文件进行重写</p><p>重启redis就可以生效了。</p><p>如果这个aof文件有错误，这时候redis是启动不起来的，我需要修复这个aof文件</p><p>redis给我们提供了一个工具<code>redis-check-aof --fix</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-check-aof --fix appendonly.aof<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/06/04/redis/image-20210708130123359.png" alt="image-20210708130123359"></p><blockquote><p>优点和缺点</p></blockquote><p>优点</p><ol><li><p>每一次修改都会同步，文件的完整性会更加好</p></li><li><p>每秒同步一次，可能会丢失一秒的数据</p></li><li><p>从不同步，效率最高</p></li></ol><p>缺点：</p><ol><li><p>相对于数据文件来说，aof远远大于rdb，修复速度比rdb慢！</p></li><li><p>Aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化。</p></li></ol><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><ol><li>分布式锁的产生场景</li></ol><blockquote><p>分布式锁对应的是多个应用，每个应用中都可能会处理相同的数据，如果多个应用对用一个操作进行了重复操作，就会出现数据不一致，数据重复问题，于是分布式锁应用而生，通常你可以理解为多线程中的synchronized</p></blockquote><ol start="2"><li>分布式锁的应用场景（==同一时间只有能一个线程操作==）</li></ol><blockquote><ol><li>多台机器都能执行某个任务，如果限制任务每次只能被一台机器执行，不能重复执行，就可以用分布式锁来做标记</li><li>秒杀场景，要求并发量很高，那么同一件商品只能被一个用户抢到，就可以使用分布式锁实现</li><li>比较敏感的数据比如金额修改，同一时间只能有一个人操作，如果2个人同时修改金额，一个加一个减金额，为了防止同时操作造成数据不一致，就可以使用分布式锁实现</li></ol></blockquote><ol start="3"><li>分布式锁的实现方式</li></ol><blockquote><ol><li>基于数据库实现分布式锁</li><li>基于缓存（redis，memcached，tair）实现分布式锁</li><li>基于Zookeeper实现分布式锁</li></ol></blockquote><p>原理：每个应用对敏感数据进行操作时都需要向获取一个锁，持有锁的应用才能对数据进行操作，保证在同一时间内只有一台应用能对数据进行操作。</p><ol start="4"><li>分布式锁的实现过程</li></ol><p>redis分布式实现是基于 命令<code>setnx key value</code> ， 其意指 若该键不存在则创建键，这就保证了redis中只有一个该键，故应用谁先获得该键，谁就拿到了锁的权限；然后业务逻辑执行完毕则需要使用 <code>del key</code> 删除键，表示释放锁；</p><p><strong>问题1（死锁问题）：</strong></p><p>如果一台业务逻辑执行完毕，程序出现异常，则锁会一直存在，没有得到释放，其它应用就会无法获得锁，此时就会造成<code>死锁</code>问题；</p><p><strong>改进方式</strong>：</p><p>拿到锁之后，给锁加上一个过期时间，也就是 expire key seconds 指令；此时避免了死锁问题，但是由于业务逻辑执行的时间不同，过期的时间设置也是一个问题，故通常分布式锁<code>不能应用于业务逻辑执行较长的程序</code>；</p><p><strong>问题2（原子性问题）：</strong></p><p>由于redis 每条指令都是原子性操作，但由于setnx 和 expire 是2 条指令，如果在执行setnx后程序出现问题expire指令未得到执行就会造成<code>死锁</code>问题；</p><p><strong>解决问题</strong>：</p><p>redis2.8版本之后引入了指令 <code>set key value [EX seconds] [PX milliseconds] [NX|XX]</code> ,该指令可以同时执行 setnx 和 expire ，于是解决了死锁问题；</p><p>参数列表解释</p><ul><li>EX seconds: 设定过期时间，单位为秒</li><li>PX milliseconds: 设定过期时间，单位为毫秒</li><li>NX: key不存在时设置值</li><li>XX: key存在时设置值</li></ul><p><strong>使用jedis客户端实现分布式锁方式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">String</span> val<span class="token punctuation">,</span><span class="token keyword">int</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> lock <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"PX"</span><span class="token punctuation">,</span>            expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关于未获得锁的解决思路</strong>：</p><p>可以直接抛出异常让客户重试</p><p>可以使用延迟队列</p><p><strong>问题3（分布式锁超时问题）:</strong></p><p>如果在加锁和释放锁之间，业务逻辑执行时间太长，导致超出了锁的超时限制，就会出现锁过期问题；换句话说，就是第一台应用执行了业务，导致锁过期；第二台应用此时可以获得锁，进行执行业务，此时第一台应用释放了锁，第二台应用在执行业务的时第三台应用获得了锁执行业务，导致在执行过程中，会有2台应用在同时执行业务逻辑；</p><p><strong>解决思路</strong>：</p><p>在释放锁的时候出现了问题，即每台应用都可以释放锁，这会造成1应用的锁释放了2应用锁的问题，换句话说，很多人手中持有的钥匙是通用的，都可以开同一个门；为了避免这个问题，就是1 应用只能释放1应用上的锁，2应用只能释放2应用上的锁，则需要对释放锁进行身份校验；由于上锁的时候key是唯一，但value可以不同，所以可以根据value进行身份的唯一标识，<strong>随机数</strong>就是一个很好的选择 ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> value <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于考虑到匹配到value校验和del不是同一个操作，故需要使用Lua脚本实现多条指令的原子性执行；</p><p><strong>jedis释放锁实现方式</strong>：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void unlock(Jedis jedis,String key,String value) {        String script_command = "if redis.call('get',KEYS[1]) == ARGV[1] then " +                "return redis.call('del',KEYS[1]) else return 0 end";        // 解锁        jedis.eval(script_command, Collections.singletonList(key), Collections.singletonList(value));            }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Redis进阶：<a href="https://www.cnblogs.com/zszxz/p/12488852.html">https://www.cnblogs.com/zszxz/p/12488852.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/06/01/hello-world/"/>
      <url>2021/06/01/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h1><p>这是我第一次使用Hexo来记录我的生活。众所周知，程序员通常使用hello world来宣告自己成功运用了一门新技术。所以今天我特意用Hello Hexo一文来传承这种仪式感，有一句古话“靡不有初，鲜克有终“，搭建一个Blog很容易，但坚持下去并非易事，所以真心希望自己可以把James’s Blog做出一番名堂。</p><p>说起为什么将网站起名为James’s Blog。其实还挺显而易见的，因为我从小就喜欢LeBron James，所以顺势将James作为了我的英文名。今天恰是湖人队的季后赛首轮生死战，可惜LeBron失败了，生涯首次首轮季后赛出局。然而细想起来也不足为奇，今年LeBron37岁了。哎真的是时光如梭啊，LeBron最引以为豪的记录之一就是10次进入总决赛其中有8年连续打进。这10次也基本涵盖了我有生之年所有的重大节点，小升初、中考、高考、考研。而今年的失利，英雄迟暮的感觉涌上心头。上次这种感觉还是KoBe的退役。</p><p>而此时此刻，我也即将开启我的职业生涯，其实计算机人虽然不是靠身体吃饭，但是职业生涯的代码黄金时间也是寥寥无几。新闻中35岁程序员失业的新闻还是蛮多的，为了避免英雄迟暮的中年危机，我觉得要利用起现在每分每秒，只有青春不虚度，才能有更多的人生经验，才能老而弥坚变成骚气的中年男性。</p><p>最后借用我爸的话，要“抬头看路也要低头拉车”，虽然细想跟“仰望星空脚踏实地”表达的意思上没啥区别。但是我还是更喜欢我爸说的，低头拉车比脚踏实地功能体现出为生活所做出的拼搏。要是拉车的时候也抬起头来，想必这车也跑不快吧，所以在拉车的时候请低下头，努力吧少年！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
